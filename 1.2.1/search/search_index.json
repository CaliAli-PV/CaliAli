{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the CaliAli Documentation","text":"<p>CaliAli is a comprehensive suite designed for extracting neural signals from one-photon calcium imaging data collected across multiple sessions in free-moving conditions. CaliAli incorporates all the necessary modules to extract long-term tracked calcium signals from raw video sessions.</p> <p></p>"},{"location":"#key-features","title":"Key Features","text":"<p>The CaliAli pipeline follows the following steps</p> <ol> <li>Downsampling and conversion of video to CaliAli format.</li> <li>Motion Correction.</li> <li>Automatic Detrending and Preprocessing.</li> <li>Alignment of Sessions.</li> <li>Neural Signal Extraction from concatenated videos with a computationally efficient approach.</li> <li>Post-processing and Evaluation</li> </ol>"},{"location":"#questions-about-caliali","title":"Questions about CaliAli?","text":"<p>We're currently developing a comprehensive Frequently Asked Questions (FAQ) section for CaliAli, coming soon! In the meantime, please don't hesitate to reach out on our discussion board if you have any questions or need assistance.</p> Ready to test CaliAli <p>Getting Started</p>"},{"location":"Downsampling/","title":"Downsampling","text":""},{"location":"Downsampling/#i-downsampling-and-conversion-to-mat-format","title":"I. Downsampling and Conversion to .mat Format","text":"<p>The first step in the CaliAli pipeline is to convert the raw video format into the .mat format used by CaliAli. This step is done together with spatial and temporal downsampling.</p>"},{"location":"Downsampling/#running-caliali_downsample-would-call-a-file-selection-windows-allowing-to-process-multiple-files","title":"Running  CaliAli_downsample()  would call a file selection windows allowing to process multiple files:","text":"<pre><code> CaliAli_options=CaliAli_downsample(CaliAli_options);  \n</code></pre> <p>Output File</p> <p>Running this function produces a <code>.mat</code> file with the <code>_ds</code> tag, containing both the video data and the <code>CaliAli_options</code> structure. By default, the output file name matches the input video, and the save path defaults to the location of the input video.</p> What formats are supported by CaliAli <p>CaliAli supports <code>.avi / .m4v / .mp4 / .mkv / .tiff / .isdx (Inscopix)</code>. However there are some limitations and requirements depending on the operative system that you are using:</p> WindowsMacLinux <p>Matlab does not have the necessary codecs to process <code>.avi</code> files in windows. You need to download and install the K-lite Codec Pack to be able to run this code.</p> Inscopix Users: Please note the following system-specific instructions <p>This requires installing the Inscopix Data Processing software. By default, the function searches for the Inscopix path in  <code>C:\\Program Files\\Inscopix\\Data Processing</code>.  If that path is not found, a folder selection dialog box will appear.</p> <ul> <li>At present, CaliAli is unable to convert Inscopix '.isdx' data into '.h5' format on ARM machines. Please convert your data into a compatible format (.h5 , uncompressed avi, mp4) using the Inscopix software. </li> <li>MATLAB cannot process compressed avi format. Be sure to save your videos in uncompressed format. You can convert your videos to .mp4 with batchConvertVideos()</li> </ul> <p>We have not tested CaliAli in Linux system yet but it is in our to do list.</p> <p>What if my video sessions are split into multiple video files (common for UCLA recordings)?</p> <p>Data acquired with the UCLA Miniscope is often divided into multiple <code>.avi</code> videos. Instead of selecting individual <code>.avi</code> files, you can choose an entire folder. CaliAli will automatically search for all files matching the file_extension defined in the <code>CaliAli_options</code> structure within the selected folder and treat them as segments of the same session. These files will then be concatenated into a single <code>.mat</code> file for streamlined processing. Lean more here.</p> Can I automate this process without manually selecting files? <p>Yes! The <code>CaliAli_options</code> structure contains subfields like <code>input_files</code> and <code>output_files</code>, which allow you to programmatically automate file processing. You can pass a cell array of file paths to <code>input_files</code> and use the cell array from <code>output_files</code> as input for the next module. For example, running:</p> <p><code>matlab  CaliAli_options.motion_correction.input_files = CaliAli_options.downsampling.output_files;</code></p> <p>will automatically set the downsampling output files as the input for the motion correction module, skipping the file selection dialog entirely. This approach is especially useful when processing multiple files overnight \ud83d\ude34.</p> What if want to change parameters in the middle of the analysis? <p>You can change parameters with CaliAli_update_parameters() </p> Next <p>After finishing downsampling you can proceed to Motion Correction </p>"},{"location":"Getting_started/","title":"Getting Started","text":"<p>This guide explains how to run each module using four demo video sessions from CaliAli/Demos, but the steps apply to your own data. The demo videos are pre-motion-corrected. Expected outputs and estimated runtimes are also covered.</p>"},{"location":"Getting_started/#installation","title":"Installation","text":"<p>First follow the CaliAli installation notes Installation and System Requirements</p>"},{"location":"Getting_started/#caliali-processing-steps-overview","title":"CaliAli Processing Steps Overview","text":"<p>This guide is based on 'Demo_pipeline.mlx'. Execute in the Matlab command windows <code>open(Demo_pipeline)</code> to open the code.</p> How long it takes to process the Demo data? <p>Processing the demo data is expected to take approximately 5 minutes on a standard desktop computer. This includes the steps bellow:</p> <p>In principle CaliAli operate in 5 steps:</p> <ol> <li> <p>Setting CaliAli Parameters</p> </li> <li> <p>Downsampling and File Conversion</p> </li> <li> <p>Motion Correction</p> </li> <li> <p>Inter-session Alignment</p> </li> <li> <p>Signal Extraction From Concatenated Sessions</p> </li> </ol>"},{"location":"Getting_started/#workflow","title":"Workflow:","text":"<p><pre><code>sequenceDiagram\n    participant U as User\n    participant DS as CaliAli_downsample()\n    participant MC as CaliAli_motion_correction()\n    participant AT as CaliAli_align_sessions()\n    participant CN as CaliAli_cnmfe()\n    participant PP as Postprocessing\n\n    U-&gt;&gt;DS: Select input video(s)\n    DS-&gt;&gt;U: Downsampled .mat files output\n    U-&gt;&gt;MC: Provide downsampled files for motion correction\n    MC-&gt;&gt;U: Motion corrected video saved\n    U-&gt;&gt;AT: Initiate inter-session alignment\n    AT-&gt;&gt;U: Updated transformation parameters\n    U-&gt;&gt;CN: Run CNMF\u2010e extraction on aligned videos\n    CN-&gt;&gt;U: Neuronal components extracted and saved\n    U-&gt;&gt;PP: Launch postprocessing for residual updates and manual review\n    PP-&gt;&gt;U: Updated neuron data ready for further analysis</code></pre> Schematic of the CaliAli pipeline for neuronal imaging analysis. The user (U) supplies raw videos to the downsampling module (DS), which are then motion-corrected (MC) and aligned (AT). CNMF-e extraction (CN) identifies neuronal components, and postprocessing (PP) refines and reviews these outputs. Arrows denote the flow of data and user interactions.</p> <p>In principle, the entire CaliAli pipeline can be run on the demo data using just the following lines of code:</p> <pre><code>% Define CaliAli Parameters \nCaliAli_options=CaliAli_demo_parameters(); % &lt;-- Modify this function to analyze your own data.\n% Do downsampling:\nCaliAli_options=CaliAli_downsample(CaliAli_options);  \n% Do motion correction\nCaliAli_options=CaliAli_motion_correction(CaliAli_options);\n% Do Inter-session Alignment\nCaliAli_align_sessions(CaliAli_options);\n%Run Signal extraction from concatenated sessions\nCaliAli_cnmfe()\n</code></pre> We will now navigate into each of the main steps in the CaliAli pipeline <p>Proceed to Setting CaliAli Parameters</p>"},{"location":"Installation/","title":"Installation and system requirements","text":""},{"location":"Installation/#system-requirement","title":"System Requirement","text":"<p>CaliAli runs in <code>MATLAB</code> and requires the following toolbox: <pre><code>-   Signal Processing Toolbox\n-   Image Processing Toolbox\n-   Statistics and Machine Learning Toolbox'\n-   Parallel Computing Toolbox\n</code></pre></p> Function requiring MATLAB 2023b <p>One of the utilities included in CaliAli requires 'MATLAB 2023b' due to its use of new functions from MATLAB's AppDesigner. This function is NOT essential for running the CaliAli pipeline.\"</p>"},{"location":"Installation/#windows","title":"Windows","text":"<p>CaliAli has been successfully tested on MATLAB versions 2022a and 2023a running on Windows 11.</p> MATLAB 2024a is not compatible with CaliAli on Windows <p>A bug in the 2024a AppDesigner is causing GUI objects to be improperly located within the app's panels, and it is also affecting other functions. This issue does not affect macOS MATLAB or Windows MATLAB 2023b.</p>"},{"location":"Installation/#macos","title":"MacOs","text":"<p>CaliAli has been successfully tested on MATLAB 2024a running on macOS Sonoma 14.5. </p>"},{"location":"Installation/#linux","title":"Linux","text":"<p>CaliAli has not been tested on linux. No anticipated compatibility issues are expected.</p>"},{"location":"Installation/#hardware","title":"Hardware","text":"<p>CaliAli automatically runs in batch mode, requiring only sufficient RAM to handle the largest imaging session and storing final outputs (less than 2GB if the largest session is 180x260 pixels and 3000 frames).</p>"},{"location":"Installation/#installation","title":"Installation","text":"<p>Installation should take a few minutes:</p> <ul> <li>Download/clone the Git repository of the codes</li> <li>Add CaliAli to the MATLAB path.</li> </ul> <p></p> Next <p>Already installed? Proceed to CaliAli processing steps</p>"},{"location":"License/","title":"Usage Agreement","text":""},{"location":"License/#gnu-general-public-license-v30","title":"GNU General Public License v3.0","text":"<p>CaliAli License</p> <p> CaliAli-PV/CaliAli is licensed under the GNU General Public License v3.0.</p> <p>Permissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights</p> <ul> <li> <p>Permissions  (1)</p> <ol> <li> <ul> <li>Commercial use </li> <li>Modification </li> <li>Distribution </li> <li>Patent use </li> <li>Private use </li> </ul> </li> </ol> </li> <li> <p>Limitations  (1)</p> <ol> <li> <ul> <li>Liability </li> <li>Warranty </li> </ul> </li> </ol> </li> <li> <p>Conditions (1)</p> <ol> <li> <ul> <li>License and copyright notice: Must be preserved</li> <li>State changes: Must disclose changes made</li> <li>Disclose source: Source code must be made available</li> <li>Same license: Modifications must be licensed under the same terms</li> </ul> </li> </ol> </li> </ul>"},{"location":"Motion_correction/","title":"Motion Correction","text":"<p>Following video downsampling, it is necessary to correct motion artifacts in each individual session.</p> <p>For this we use the following function. <pre><code>CaliAli_options=CaliAli_motion_correction(CaliAli_options);\n</code></pre></p> <p>Output File</p> <p>Running this function produces a <code>.mat</code> file with the <code>_mc</code> tag, containing both the motion corrected video data and the <code>CaliAli_options</code> structure. By default, the output file name matches the input video, and the save path defaults to the location of the input video. A typical file name may be <code>vid_01_ds_mc.mat</code>. </p> Limitations of the non-rigid registration module <p>This code is experimental and may introduce undesired deformations when adjusting for non-rigid deformation.</p> How long it takes to motion correct videos? <ul> <li>Rigid: ~ 5,000 frames in ~2 minutes on a modern CPU.</li> <li>Non-rigid: is substantially slower processing around ~10 frames per second. A new non-rigid model will be implemented soon</li> </ul> Important <p>Ensure to visually inspect the motion-corrected video before proceeding to the next step: view_Ca_video()</p> Next <p>After finishing downsampling and motion correction you can proceed to Inter-session Alignment</p>"},{"location":"Parameters/","title":"CaliAli parameter settings","text":"<p>The CaliAli pipeline uses a structured approach to initialize, configure, and manage parameters across different processing stages. The function CaliAli_parameters() acts as the central hub for handling parameters, ensuring modularity and flexibility.</p>"},{"location":"Parameters/#key-features-of-caliali-parameter-management","title":"\ud83d\udccc Key Features of CaliAli Parameter Management","text":""},{"location":"Parameters/#1-modular-parameter-handling","title":"1\ufe0f\u20e3 Modular Parameter Handling","text":"<p>CaliAli organizes its processing pipeline into separate submodules, each with its own set of parameters:</p> <ul> <li>Downsampling</li> <li>Preprocessing (detrending, background processing)</li> <li>Motion Correction (rigid and non-rigid)</li> <li>Inter-Session Alignment</li> <li>CNMF-E (Calcium  signal extraction and demixing)</li> </ul>"},{"location":"Parameters/#2-flexible-input-handling","title":"2\ufe0f\u20e3 Flexible Input Handling","text":"<p>CaliAli parameters can be set in two ways:</p> <ol> <li>Default Initialization:    If no inputs are provided, default parameters are loaded:</li> </ol> <pre><code>opt = CaliAli_parameters();\n</code></pre> <ol> <li>Custom Parameter Structure:    Users can provide an existing structure to modify specific parameters:</li> </ol> <pre><code>opt = CaliAli_parameters(existing_opt);\n</code></pre> <p>The function CaliAli_demo_parameters() demonstrates how to create this structure. The recommended approach for analyzing your own data is to modify and duplicate this code to suit your needs: <code>open(CaliAli_demo_parameters());</code></p>"},{"location":"Parameters/#adjusting-caliali-parameters","title":"Adjusting CaliAli Parameters.","text":"<p>CaliAli requires setting 33 parameters. However, in practice you only need to strictly focus on three: </p> <ol> <li>Frame rate: <code>sf</code></li> <li>Neuron filtering size: <code>gSig</code> which correspond to 1/5 of the average neuron size in pixels.</li> <li>System Memory:</li> </ol> Parameter Name Default Value Description How to Choose <code>memory_size_to_use</code> <code>total_system_memory_GB</code> Total available memory for computation Adjust based on available RAM. <code>memory_size_per_patch</code> <code>16</code> Memory allocated per patch Adjust based on available RAM and number of patches. <p>For advanced users, a detailed description of other parameters and methods for setting them can be found in: Parameter Index</p> <p>When you run <code>CaliAli_options=CaliAli_demo_parameters();</code> you will get a structure as follow:</p> <pre><code>\u25fc CaliAli_options\n\u251c\u2500 downsampling\n\u2502  \u251c\u2500 BVsize\n\u2502  \u2502  Value: [1.5 2.25]\n\u2502  \u251c\u2500 file_extension\n\u2502  \u2502  Value: 'avi'\n\u2502  \u2514\u2500 ...\n\u251c\u2500 preprocessing\n\u2502  \u251c\u2500 dendrite_filter_size\n\u2502  \u2502  Value: [0.5 0.6 0.7 0.8]\n\u2502  \u251c\u2500 dendrite_theta\n\u2502  \u2502  Value: 30\n\u2502  \u2514\u2500 ...\n\u2514\u2500 ...\n</code></pre> Next <p>Once familiarized with the <code>CaliAli_options</code> structure proceed to Downsampling</p>"},{"location":"Parameters_index/","title":"CaliAli Parameters Overview","text":"<p>This table lists all CaliAli parameters, their default values, a brief description, and guidance on how to choose them.</p>"},{"location":"Parameters_index/#parameter-table","title":"\ud83d\udccc Parameter Table","text":""},{"location":"Parameters_index/#general-parameters","title":"\ud83d\udd39 General Parameters","text":"Parameter Name Default Value Description How to Choose <code>gSig</code> <code>2.5</code> Neuron filter size in pixels Use 1/5 of the neuron diameter in pixels. If unsure, opt for smaller values. <code>sf</code> <code>10</code> Frame rate (fps) Set to match the acquisition frame rate. <code>input_files</code> <code>[]</code> Paths to input video files Leave empty to manually select files. <code>output_files</code> <code>[]</code> Paths to output video files Leave empty for default naming (recommended)."},{"location":"Parameters_index/#downsampling-parameters","title":"\ud83d\udd39 Downsampling Parameters","text":"Parameter Name Default Value Description How to Choose <code>BVsize</code> <code>[]</code> Size of blood vessels in pixels [min, max] Leave empty to automatically calculate based on gSig or use <code>BV_app</code> for optimal selection. <code>spatial_ds</code> <code>1</code> Spatial downsampling factor Increase for faster processing, decrease for higher resolution. <code>temporal_ds</code> <code>1</code> Temporal downsampling factor Increase only if memory constraints prevent full processing. <code>file_extension</code> <code>'avi'</code> File extension for processed videos organized in folders Used when sessions are split into multiple files."},{"location":"Parameters_index/#preprocessing-parameters","title":"\ud83d\udd39 Preprocessing Parameters","text":"Parameter Name Default Value Description How to Choose <code>neuron_enhance</code> <code>true</code> Use MIN1PIE background subtraction Keep enabled unless signal loss is observed during preprocessing. <code>noise_scale</code> <code>true</code> Enable noise scaling per pixel Keep enabled unless signal loss is observed during preprocessing. <code>detrend</code> <code>1</code> Detrending window (seconds), 0 = no detrending Set to the duration of calcium transients in seconds."},{"location":"Parameters_index/#motion-correction-parameters","title":"\ud83d\udd39 Motion Correction Parameters","text":"Parameter Name Default Value Description How to Choose <code>reference_projection_rigid</code> <code>'BV'</code> Reference projection for rigid correction Choose <code>neuron</code> if blood vessels are not suitable. <code>do_non_rigid</code> <code>false</code> Perform non-rigid motion correction Enable only after confirming rigid correction was insufficient. <code>non_rigid_pyramid</code> <code>{'BV','BV','neuron'}</code> Multi-level registration pyramid for non-rigid correction Use default unless BV is unavailable. <code>non_rigid_batch_size</code> <code>[20,60]</code> Batch size range for non-rigid correction, CaliAli will optimize within this range. Set as <code>[2 x sf, 6 x sf]</code>."},{"location":"Parameters_index/#inter-session-alignment-parameters","title":"\ud83d\udd39 Inter-Session Alignment Parameters","text":"Parameter Name Default Value Description How to Choose <code>do_alignment</code> <code>true</code> Perform inter-session alignment Always true unless sessions were pre-aligned. If false, videos will be concatenated without registration. <code>projections</code> <code>'BV+neuron'</code> Projection method used for alignment By default, use both blood vessels and neurons for registration. If one is unsuitable, choose either BV or neurons. <code>final_neurons</code> <code>false</code> Use an additional alignment iteration based on neurons Enable if session registration was inaccurate. Often not necessary <code>Force_BV</code> <code>0</code> Force BV alignment even if stability score is low Sometimes BV stability score may be low as results of a debris in the FOV. Setting this parameter to true would ensure that BV are used for registration"},{"location":"Parameters_index/#cnmf-e-parameters-overview","title":"\ud83d\udccc CNMF-E Parameters Overview","text":""},{"location":"Parameters_index/#memory-and-patch-processing-parameters","title":"\ud83d\udd39 Memory and Patch Processing Parameters","text":"Parameter Name Default Value Description How to Choose <code>memory_size_to_use</code> <code>total_system_memory_GB</code> Total available memory for computation Adjust based on available RAM. <code>memory_size_per_patch</code> <code>16</code> Memory allocated per patch Adjust based on available RAM and number of patches. <code>patch_dims</code> <code>[64, 64]</code> Dimensions of patches Larger patches improve accuracy but increase computation time.. <code>w_overlap</code> <code>32</code> Patch overlap width Increase if you detect edge artifacts. <code>batch_sz</code> <code>0</code> Batch size for alignment, 0 = full session By default, the batch size is set to match the duration of each session. This parameter allows you to define batches in terms of the number of frames instead."},{"location":"Parameters_index/#initialization-parameters","title":"\ud83d\udd39 Initialization Parameters","text":"Parameter Name Default Value Description How to Choose <code>min_corr</code> <code>0.1</code> Minimum correlation for neuron seeding In most cases, this value is overridden using <code>CaliAli_set_initialization_parameters(CaliAli_options)</code>, allowing selection via a GUI. If not using the GUI, increase it to reduce non-neuronal detections or decrease it to detect more neurons. <code>min_pnr</code> <code>6</code> Minimum peak-to-noise ratio for seeding Same as <code>min_corr</code>. <code>min_pixel</code> <code>[]</code> Minimum pixel area for neurons Automatically calculated based on gSig."},{"location":"Parameters_index/#spatial-parameters","title":"\ud83d\udd39 Spatial Parameters","text":"Parameter Name Default Value Description How to Choose <code>with_dendrites</code> <code>true</code> Do not assume that signals are circular during extraction Always enable for better CNMF convergence and proper dendrite detection. <code>spatial_constraints</code> <code>{'connected': False, 'circular': False}</code> Constraints for spatial filtering [Always disable for better CNMF convergence and dendrite identification.] <code>spatial_algorithm</code> <code>'hals_thresh'</code> Algorithm for spatial extraction Use default unless alternative extraction methods are needed."},{"location":"Parameters_index/#temporal-parameters","title":"\ud83d\udd39 Temporal Parameters","text":"Parameter Name Default Value Description How to Choose <code>deconv_flag</code> <code>true</code> Enable deconvolution Use default if unsure. Enable for better temporal resolution. <code>deconv_options</code> <code>{'type': 'ar1', 'method': 'foopsi', 'smin': -5, 'optimize_pars': True, 'max_tau': 100}</code> Deconvolution settings Use default parameters to minimize false-positives and computational stability"},{"location":"Parameters_index/#merging-parameters","title":"\ud83d\udd39 Merging Parameters","text":"Parameter Name Default Value Description How to Choose <code>merge_thr_spatial</code> <code>[0.8, 0.4, -inf]</code> Merge components with highly correlated spatial shapes (<code>corr=0.8</code>), moderate temporal correlations of calcium activities (<code>corr=0.4</code>), and disregard spikes correlations (<code>corr=-inf</code>). Increase spatial correlation threshold for stricter merging."},{"location":"Post/","title":"Post-Processing","text":"<p>CaliAli incorporates a GUI to facilitate the identification of false-positive detections. </p> <p>After loading the <code>neuron</code> object stored in the Checkpoint files, execute the following function to call this GUI:</p> <pre><code>ix=postprocessing_app(neuron);\n</code></pre>"},{"location":"Post/#monitoring-extracted-components","title":"Monitoring Extracted Components","text":"<p>The post-processing app will display the correlation image with overlaid contours of the detected neurons. Clicking on these contours will show the corresponding extracted calcium transients:</p> <p></p> <p>You can hold you mouse to zoom:</p> <p></p> <p>You can reset the zoom and clear the neuronal selection by pressing the buttons located above the correlation image:</p> <p></p> <p>You can label false positives by right-clicking on the neuron contours:</p> <p></p>"},{"location":"Post/#sort-spatial-components","title":"Sort Spatial Components","text":"<p>CaliAli can label false positives based on the shape of the extracted spatial components. To accomplish this, CaliAli incorporates a tool that sorts spatial components by their spatial congruence. To utilize this function, press the 'Separate Spatial' button.</p> <p>This will open a panel displaying all the extracted spatial components. Components with congruent shapes are sorted at the beginning, while neurons with shapes different from the rest of the population are sorted last. Components labeled as false-positives will be listed on the right.</p> <p></p> <p>Note that elongated components, which could correspond to neuropil signals rather than neuron somas, appear at the bottom of the list. You can select these components and move them to the false-positive panel.</p> <p></p> <p>Once satisfied with the selections press the <code>Done!</code> button.</p> <p>This will label the component as false-positive in the correlation image. </p>"},{"location":"Post/#deleting-and-merging-components","title":"Deleting and Merging Components","text":"<p>Once you finish labeling false-positive in the main App press the <code>Done!</code> button.</p> <p>This will create a variable <code>ix</code> holding the indices of the labeled false-positives.</p> <p>You can delete these components by running <code>neuron.delete(ix);</code>. Alternatively, you can monitor each of these components with <code>neuron.viewNeurons(find(ix), neuron.C_raw);</code>.</p> <p>After deleting false positives, you can consider merging neurons by manually monitoring neurons that are close by. For this, run<code>neuron.merge_high_corr(1, [0.1, 0.3, -inf]);</code></p> Tip <p>Note that you can save your results at any point running <code>save_workspace(neuron);</code></p>"},{"location":"Post/#picking-neurons-from-residual","title":"Picking Neurons from Residual","text":"<p>Some neurons may remain un-extracted after the initial processing. To extract potentially missed neurons run: <code>neuron=manually_update_residuals(neuron,use_parallel);</code></p> <p>This will open a GUI displaying the PNR, Corr., and PNR*Corr. images(1). These images will be shown in their original form (top panels) and also after subtracting the current neuron detections from the video (Residual video) (bottom panels).</p> <ol> <li>Refer to Select Extraction Parameters for a description of the PNR, Corr. and PNR*Corr images.</li> </ol> <p>Here, you can manually add initialization seeds for undetected neurons. Clicking on any of these images will place a red dot that initializes these neurons:</p> <p></p> <p>This will initialize these neurons and repeat the CNMF process required to extract the Calcium signals.</p> <p>After extracting the residual data, you may want to consider redoing the post-processing step described earlier</p> Tip <p>In most cases picking neurons is not necessary.</p> If you ever change the location of the videos <p>If you ever change the location of the videos and files generated during the analysis be sure to run this steps after</p> <p>CONGRATULATIONS!: You have successfully extracted neuronal signals using CaliAli. Don't forget to save the results with <code>save_workspace(neuron)</code></p> Next <p>We recommend checking the Utilities  included with CaliAli.</p>"},{"location":"Processing_split_data/","title":"Processing split data","text":""},{"location":"Processing_split_data/#i-processing-video-sessions-split-into-multiple-files","title":"I. Processing Video Sessions Split Into Multiple Files","text":"<p>It is common for continuous calcium imaging data to be saved across multiple video files for easier access. For example as follows:</p> <pre><code>\u25fc My_data\n\u251c\u2500 Session_1_day_0\n\u2502  \u251c\u2500 0.avi\n\u2502  \u251c\u2500 1.avi\n\u2502  \u251c\u2500 ...\n\u2502  \u2514\u2500 12.avi\n\u251c\u2500 Session_2_day_5\n\u2502  \u251c\u2500 0.avi\n\u2502  \u251c\u2500 1.avi\n\u2502  \u251c\u2500 ...\n\u2502  \u2514\u2500 14.avi\n\u2514\u2500 Session_3_day_15\n   \u251c\u2500 0.avi\n   \u251c\u2500 1.avi\n   \u251c\u2500 ...\n   \u2514\u2500 14.avi\n</code></pre> <p>Treating each of these split videos as independent sessions is not ideal, as using the inter-session alignment pipeline is more computationally demanding than simply aligning and motion-correcting the concatenated chunk.</p> <p>The recommended approach is to select the parent folder when calling: <pre><code>CaliAli_options = CaliAli_downsample(CaliAli_options);\n</code></pre></p> <p>This will generate three <code>.mat</code> files\u2014one for each session\u2014containing the data from all individual segments concatenated. By default, CaliAli searches for <code>.avi</code> files and concatenates them using natural sorting based on their filenames. The output will look like:</p> <pre><code>\u25fc My_data\n\u251c\u2500 Session_1_day_0\n\u251c\u2500 Session_2_day_5\n\u251c\u2500 Session_3_day_15\n\u251c\u2500 Session_1_day_0_con.mat\n\u251c\u2500 Session_1_day_5_con.mat\n\u2514\u2500 Session_3_day_15_con.mat\n</code></pre> <p></p> What about video sessions split into multiple TIFF files? <p>You can set the CaliAli parameter <code>CaliAli_options.downsampling.file_extension = 'tiff'</code>. </p> <p>The simplest way is to modify the demo options:</p> <p><pre><code> edit CaliAli_demo_parameters\n</code></pre>   and set <code>params.file_extension = 'tiff';</code>. This will tell CaliAli to search for tiff files. </p>"},{"location":"Utilities/","title":"Utilities","text":""},{"location":"Utilities/#separate-data-from-different-sessions","title":"Separate Data from Different Sessions","text":"<p>Separates data into sessions based on frame information and optionally bins the data.</p>"},{"location":"Utilities/#syntax","title":"Syntax:","text":"<pre><code>S = separate_sessions(data, F, bin, sf)\n</code></pre>"},{"location":"Utilities/#description","title":"Description:","text":"<p>This function separates data into sessions based on provided frame information (F). If F is not provided, the function prompts the user to select a file containing frame data. The data can be optionally binned using the specified bin size (bin) and sampling frequency (sf).</p>"},{"location":"Utilities/#inputs","title":"Inputs:","text":"<ul> <li> <p>data: Matrix of data to be separated into sessions.</p> </li> <li> <p>F (optional): Frame information used to define intervals for separating sessions. If not provided, the user will be prompted to select a file.</p> </li> <li> <p>bin (optional): Bin size for binning the data. If set to 0, no binning is applied. Default is 0 if not specified.</p> </li> <li> <p>sf (optional): Sampling frequency used when binning the data. Default is 1 if not specified.</p> </li> </ul>"},{"location":"Utilities/#outputs","title":"Outputs:","text":"<ul> <li>S: Cell array containing separated session data.</li> </ul>"},{"location":"Utilities/#example-usage","title":"Example Usage:","text":"<pre><code>% Separate spike data with default bin size and sampling frequency (no binning)\nS=separate_sessions(neuron.S, neuron.CaliAli_opt.F);\n\n% Separate spike data with 1s bin considering Sampling frequency of 10.\nS=separate_sessions(neuron.S, neuron.CaliAli_opt.F,1,10);\n\n% Separate raw Calcim traces data with default bin size and sampling frequency (no binning)\nS=separate_sessions(neuron.C_raw, neuron.CaliAli_opt.F);\n</code></pre>"},{"location":"Utilities/#other-functions","title":"Other Functions","text":""},{"location":"Utilities/#save-workspace","title":"Save Workspace","text":"<pre><code>save_workspace(neuron);\n</code></pre>"},{"location":"Utilities/#updating-paths-for-video-and-mat-files","title":"Updating Paths for Video and MAT Files","text":"<p>If you've changed the location of the videos and files generated during the analysis, you'll need to run the following function and select the new 'source_extraction' folder.</p> <pre><code> neuron=update_folder_path(neuron);\nsave_workspace(neuron);\n</code></pre>"},{"location":"Utilities/#plot-neuron-contours","title":"Plot Neuron Contours","text":"<pre><code>%% To visualize neurons contours:\nneuron.Coor=[]  \n\n%% Plot over PNR image:\n   neuron.show_contours(0.9, [], neuron.PNR, 0);  %PNR\n\n%% Plot over correlation image:\n   neuron.show_contours(0.6, [], neuron.Cn,0);   %CORR\n\n%% Plot over PNR.Corr image:\n  neuron.show_contours(0.6, [], neuron.Cn.*neuron.PNR,0); %PNR*CORR\n\n%% Plot over neuron footprints:\n A=neuron.A;A=full(A./max(A,[],1)); A=reshape(max(A,[],2),[size(neuron.Cn,1),size(neuron.Cn,2)]);\n neuron.show_contours(0.6, [], A, 0);\n</code></pre>"},{"location":"Version_History/","title":"Version History","text":""},{"location":"Version_History/#caliali-121-release-notes","title":"CaliAli 1.2.1 Release Notes","text":"<p>April 16th 2025</p> <ul> <li>Added documentation for processing split calcium imaging data files, including support for multiple video segments per session and TIFF files.</li> <li>Fixed a bug where the text progress bar did not display the final update.</li> <li>Fixed a bug where traces were not correctly displayed in <code>postprocessing_app</code>.</li> <li>Disabled batch processing in <code>v2uint16</code> and <code>v2uint8</code> due to compatibility issues on some operating systems.</li> <li>Fixed a bug where the background component was not correctly handled in batch mode when using the SVG model.</li> <li>Improved data handling when saving concatenated files, making the new code significantly faster.</li> </ul>"},{"location":"Version_History/#caliali-12-release-notes","title":"CaliAli 1.2 Release Notes","text":"<p>February 7th 2025</p> <p>This update focuses on increasing the modularity of the CaliAli pipeline by restructuring how parameters and functions are handled. A central CaliAli_options structure now consolidates all settings required for video processing, enabling each module to operate more independently. This refactoring lays groundwork for future support of multiple calcium imaging data types (including both 2P and 1P) and specialized tools for dendritic signal extraction.</p> <p>Because of these significant changes, the previous workflow used to analyze data is no longer compatible, and older procedures will not work in the updated environment.</p>"},{"location":"Version_History/#other-changes","title":"Other Changes","text":"File / Group Change Summary Downsample &amp; ScanImageTiffReader (Downsample/\u2026) Introduced CaliAli_downsample and batchConvertVideos; removed legacy Inscopix, AVI, temporal, and TIFF downsampling scripts; updated ISXD2h5 to omit downsampling; and added a new ScanImageTiffReader package with associated helpers and mex compilation adjustments for cpp\u2011tiff usage. Motion Correction (Vessel_MC and other codes) Added new functions CaliAli_motion_correction and Rigid_mc; removed outdated MC_Batch and motion_correct_PV; introduced Non_rigid_mc and refinements in vessel\u2013focused correction routines. Other_codes (Utilities and Experimental) Added utilities for loading (CaliAli_load), saving (CaliAli_save, CaliAli_save_chunk), updating parameters (CaliAli_update_parameters, update_CaliAli_options), and various helpers (catpad_centered, concat_nan_centered, getSystemMemory, v2uint16/v2uint8 enhancements) with widespread improvements in memory management and file concatenation. Postprocessing Modified functions for residual updates and manual corrections (get_seed, manually_update_residuals, mouse_click, postprocessDeconvolvedTraces, postprocessing_app, update_residual_custom_seeds) with refined parameter sourcing and GUI improvements. Documentation (README.md &amp; docs/\u2026) Updated online documentation links; added numerous documentation files for new/updated functions (e.g. CNMFE_parameters, CaliAli_cnmfe, CaliAli_downsample, motion correction, postprocessing, etc.), enhancing details on syntax, inputs, outputs, and usage."},{"location":"Version_History/#caliali-101-release-notes","title":"CaliAli 1.0.1 Release Notes","text":"<p>April 22nd 2024</p> <ul> <li>Introduced a new app for determining optimal blood vessel (BV) size.</li> <li>Removed unnecessary or deprecated functions.</li> <li>Several improvements to the documentation.</li> </ul> <p>Full Changelog on GitHub.</p>"},{"location":"Version_History/#caliali-stable-version-10-release-notes","title":"CaliAli Stable Version 1.0 Release Notes","text":"<p>April 19th 2024</p> <p>We are excited to announce the first stable version of CaliAli, featuring significant enhancements and improvements. Below are the key changes in this release:</p> <p>Changes:</p> <ul> <li> <p>Full Online Documentation: Access comprehensive documentation to guide you through using CaliAli efficiently.</p> </li> <li> <p>Optimized Computational Performance: CaliAli is now optimized for low memory requirements, ensuring smoother and more efficient processing.</p> </li> <li> <p>Improved Session Analysis: Analyze individual sessions and perform multisession concatenation seamlessly.</p> </li> <li> <p>Enhanced Blood Vessel (BV) Extraction: Minimized vignetting artifacts for improved accuracy in BV extraction.</p> </li> <li> <p>New BV Stability Metric: Evaluate tracking performance with a new stability metric integrated into BV extraction.</p> </li> <li> <p>Bug Fixes in GUIs: Addressed several bugs in the graphical user interfaces (GUIs) for improved usability.</p> </li> <li> <p>Enhanced Inter-Session Alignment: Further improvements to the inter-session alignment module for precise video session alignment.</p> </li> </ul> <p>Full Changelog on GitHub.</p>"},{"location":"Version_History/#caliali-beta-release-10-beta","title":"CaliAli Beta Release 1.0-beta","text":"<p>May 19th 2023</p> <p>The first beta release of CaliAli is now available, offering advanced capabilities for extracting neural signals from one-photon calcium imaging data in free-moving conditions.</p> <p>For details, refer to the BioRxiv preprint.</p> <p>Explore CaliAli to analyze calcium imaging data with accuracy and efficiency, shaping the future of neural signal extraction in neuroscience research.</p>"},{"location":"alignment/","title":"Inter-session Alignment","text":""},{"location":"alignment/#inter-session-alignment-and-projection-calculation","title":"Inter-Session Alignment and projection calculation","text":"<p>After motion correction we have to calculate relevant projections, align and concatenate sessions. Alternatively, we can also process individual files independently:</p> Alignment and ConcatenationSingle File Processing <p>To achieve this, CaliAli performs the following steps:</p> <ol> <li>Detrend each imaging session. </li> <li>Calculate projections of the blood vessels and neurons. </li> <li>Calculate displacement fields to align sessions using blood vessels and neurons. </li> <li>Evaluates blood vessel (BV) similarity and switches to neuron-based alignment if necessary. </li> <li>Apply displacement field to each video session. </li> <li>Standardized pixels and concatenate aligned videos: </li> </ol> <p>This is done by executing;    <pre><code>CaliAli_align_sessions(CaliAli_options);\n</code></pre></p> <p>Output File</p> <p>Running this function produces a <code>.mat</code> file with the <code>_Aligned</code> tag, containing the aligned and concatenated video and the <code>CaliAli_options</code> structure. By default, the output file name matches the input video, and the save path defaults to the location of the input video. A typical file name may be <code>'Last_session_name\"_ds_mc_Aligned.mat</code>. This will also create one <code>.mat</code> file with the <code>_det</code> tag for each input session containing the detrended data and the relevant projections.</p> <p>Even if we do not require to align sessions we still need to calculate relevant projections that will be used in later stages.  This is done by executing:   <pre><code>  detrend_batch_and_calculate_projections(CaliAli_options);\n</code></pre></p> <p>Output File</p> <p>Running this function produces a <code>.mat</code> file with the <code>_det</code> tag, containing the aligned and concatenated video and the <code>CaliAli_options</code> structure. By default, the output file name matches the input video, and the save path defaults to the location of the input video. A typical file name may be <code>vid_01_ds_mc_det.mat</code>.</p>"},{"location":"alignment/#evaluating-alignment-performance","title":"Evaluating Alignment Performance:","text":""},{"location":"alignment/#console-outputs","title":"Console outputs:","text":"<p>While running  CaliAli_align_sessions(), the command window will display output similar to the following:</p> <pre><code>Blood-vessel similarity score: 5.376\nCalculating correlation of the Neurons projections... \nProcessing:  100%  |############| 6/6it [00:00:00&lt;00:00:00, 32.27 it/s]\nCorrelation between Neurons projections is good! \nLowest spatial correlation: 0.491\n</code></pre> <ul> <li> <p>The <code>Blood-vessel similarity score</code> reflects the usefulness of blood vessels in correcting inter-session misalignments..</p> </li> <li> <p>The <code>spatial correlation value</code> indicates the correlation of the aligned neurons' projections.</p> </li> </ul>"},{"location":"alignment/#post-alignment","title":"Post alignment:","text":"<p>To visually confirm the alignment performance, load the <code>*_Aligned.mat file</code> in MATLAB: First, load the alignment options from a saved <code>.mat</code> file.  For the demo file this would be:</p> <p><pre><code>CaliAli_options = CaliAli_load('v4_mc_ds_Aligned.mat', 'CaliAli_options');\n</code></pre> Replace <code>'v4_mc_ds_Aligned.mat'</code> with the path to your specific file.</p> <p>You can evaluate the alignment performance by running the following lines: <pre><code>% Get BV-score:\nfprintf('BV Score: %.4f\\n', CaliAli_options.inter_session_alignment.BV_score);\n% Get alignment metrics: Mean Correlation score and Crispness (Higher the\n% better)\nAlignment_metrics = CaliAli_options.inter_session_alignment.alignment_metrics\nplot_alignment_scores(CaliAli_options)\n\n% View aligned projections:\nP = CaliAli_options.inter_session_alignment.P;  %extract the aligned projections\nframe=plot_P(P); %Create video of the Aligned projections before and after CaliAli.\n</code></pre></p> <p>The most important components is the table P, which is structured as follow: </p> Column Description <code>Original</code> Projections before alignment <code>Translation</code> Projections after translation <code>Multi-Scale</code> Projections after multi-scale alignment <code>Final</code> Projections after final alignment <p>Each column contains a nested table with projections organized as 3D or 4D arrays, representing data from each session:</p> Column Description <code>Mean</code> Mean frame of each session <code>BloodVessels</code> Blood vessels projection of each session <code>Neurons</code> Neuron projections of each session <code>PNR</code> PNR projections of each session <code>BV+Neurons</code> Blood vessels and neurons projection of each session <p>You can visualize these projections with the following commands:</p> <p><pre><code>P = CaliAli_options.inter_session_alignment.P;  %extract the aligned projections\nframe=plot_P(P); %Create video of the Aligned projections before and after CaliAli.\n</code></pre> </p> Important <p>Please visually verify that sessions are correctly aligned. If you detect noticeable displacement in the field of view it means that CaliAli is not suitable for this data.</p> Next <p>After finishing inter-session alignment or individual sessions processing you can proceed to Extract Calcium Traces with CaliAli</p>"},{"location":"extraction/","title":"Calcium Signal Extraction with CaliAli","text":"<p>After confirming that no errors occur during session alignment and concatenation, you can proceed to extract neural signals.</p> <p>This process involves two steps:</p> <ol> <li> <p>Select Extraction Parameters for Each Session: Utilize a graphical user interface to set initialization thresholds.</p> </li> <li> <p>Run the CaliAli Extraction Module: Execute the CaliAli extraction module to extract neural signals. </p> </li> </ol> A GUI for Parameter Selection <p>The extraction of calcium signals relies on an initial estimation of neuron locations based on two key projections: the correlation image (showing pixel correlations) and the peak-to-noise ratio (PNR) image (highlighting active neurons in the video). To accurately identify candidate neurons, specific minimum correlation and PNR thresholds must be defined. These thresholds are essential for distinguishing genuine neuron activity from background noise and signal fluctuations.</p> <p>CaliAli offers a graphical user interface (GUI) for setting these thresholds visually.</p> <p>You can use this GUI by running the following code:  'CaliAli_set_initialization_parameters()'</p>"},{"location":"extraction/#extracting-calcium-signals","title":"Extracting Calcium Signals","text":"<p>After defining input parameters perform neuronal extraction by running the following command:</p> <p><pre><code>CaliAli_cnmfe()\n</code></pre> This will open a file selector dialog and start the neuronal extraction process one file at a time.</p>"},{"location":"extraction/#overview-of-the-calcium-extraction-process","title":"Overview of the Calcium extraction process","text":"<p>The neuronal extraction process can be described by the following diagram:</p> <p><pre><code>graph TD;\n    A[CNMFe_batch] --&gt; B[Distribute data in patches];\n    B --&gt; C[Initialization];\n    C --&gt; |Checkpoint| D[Update Background];\n    D --&gt; E[Update Spatial];\n    E --&gt; F[Update Temporal];\n    F --&gt; G[Remove False-positives];\n    G --&gt; H[Merge Neurons];\n    H --&gt; I[Similarity Check];\n    I --&gt;|&lt;0.95| D;\n    I --&gt;|&gt;0.95&lt;br&gt;Checkpoint| J[Post-process Traces];\n    J --&gt; |Checkpoint| K[Manually Remove FP];\n    K --&gt; L[Manually Merge Neurons];\n    L --&gt; M[Pickup from Residual?];\n    M --&gt;|Yes| D;\n    M --&gt;|No| Finish;   \n\n    O[Optional];\n    P[Automatic];\n    N[Automatic CNMF];\n\nstyle A fill:none, stroke:none;\nstyle D stroke:#1CC90E, color:#00129A,  stroke-width:2px;\nstyle E stroke:#1CC90E, color:#00129A,  stroke-width:2px;\nstyle F stroke:#1CC90E, color:#00129A,  stroke-width:2px;\nstyle G stroke:#1CC90E, color:#00129A,  stroke-width:2px;\nstyle H stroke:#1CC90E, color:#00129A,  stroke-width:2px;\nstyle N stroke:#1CC90E, color:#00129A,  stroke-width:2px;\n\nstyle K stroke:#E04C3B, color:#7A6A68,  stroke-width:2px; \nstyle L stroke:#E04C3B, color:#7A6A68,  stroke-width:2px;\nstyle M stroke:#E04C3B, color:#7A6A68,  stroke-width:2px;\nstyle O stroke:#E04C3B, color:#7A6A68,  stroke-width:2px;</code></pre> During the execution of this code, you will see messages in the command window reflecting the steps depicted above:</p> <pre><code>----------------UPDATE BACKGROUND---------------------------\nProcessing:  100%  |############| 4/4it [00:00:04&lt;00:00:00, 1.06 it/s]\n\n-----------------UPDATE SPATIAL---------------------------\nProcessing:  100%  |############| 4/4it [00:00:02&lt;00:00:00, 1.45 it/s]\n\n-----------------UPDATE TEMPORAL---------------------------\nProcessing:  100%  |############| 4/4it [00:00:05&lt;00:00:00, 1.30 s/it]\nDeconvolve and denoise all temporal traces again...\n</code></pre> How does CaliAli deconvolve calcium signals? <p>CaliAli employs the original FOOPSI method with an AR(1) autoregressive model for initialization and matrix factorization (which is faster). During the final post-processing of traces, a thresholded FOOPSI approach with an AR(2) model is utilized (which is slower but more accurate). Learn more in the OASIS documentation.</p> <p>Note that there are three checkpoints during this process: one after Initialization, another after CNMF iterations, and a third after Post-processing of Calcium Traces.</p> <p>The checkpoint files will be created as follows: </p> <pre><code>.\n\u2514\u2500 &lt;\"file_name\"&gt;_aligned_source_extraction/\n   \u2514\u2500 frames_&lt;\"xxx\"&gt;/\n      \u2514\u2500 LOGS_&lt;\"DATE\"&gt;/\n         \u251c\u2500 &lt;\"DATE-TIME\"&gt;.mat \"Checkpoint #1\"\n         \u251c\u2500 &lt;\"DATE-TIME\"&gt;.mat \"Checkpoint #2\"\n         \u251c\u2500 &lt;\"DATE-TIME\"&gt;.mat \"Checkpoint #3\"\n</code></pre> <p>Loading any of these checkpoint files will load a <code>neuron</code> object containing the following properties:</p> <p><pre><code>   A: [27840\u00d7106 double]\n   A_prev: [27840\u00d7106 double]\n   C: [106\u00d74000 double]\n   C_prev: [106\u00d74000 double]\n   C_raw: [106\u00d74000 double]\n   S: [106\u00d74000 double]\n   kernel: [1\u00d71 struct]\n   b0: {2\u00d74 cell}\n   b0_new: [120\u00d7232 double]\n   ...\n</code></pre>  Here the most important properties are:</p> <ol> <li> <p>A: Spatial components of neurons stored as a matrix d1*d2xN (1)</p> <ol> <li>d1 and d2 are the x and y dimensions of the field of view and N is the number of neurons.</li> </ol> </li> <li> <p>C_raw: Extracted raw calcium traces stored as a matrix NxT (1)</p> <ol> <li>N is the number of neurons and T is the number of frames. Fluorescent signals are expressed as SD above the noise level. This is what we use as raw dF/F0.  </li> </ol> </li> <li> <p>C: Denoised Calcium Signals. Same structure as C_raw.</p> </li> <li> <p>S: Raising events or Spikes. Same structure as C_raw. (1)</p> <ol> <li>This dataset contains the same information as dataset C, excluding the calculated rise and decay times of the calcium signals. S is recommended for most analyses.</li> </ol> </li> </ol> <p>You can easily monitor the extracted calcium transients by running view_traces(neuron)</p>"},{"location":"extraction/#post-processing-detected-components","title":"Post-processing detected components","text":"<p>CaliAli incorporates a GUI to facilitate the identification of false-positive detections.  After loading the <code>neuron</code> object stored in the Checkpoint files, execute the following function to call this GUI:  ix=postprocessing_app().</p> <p>This will create a variable <code>ix</code> holding the indices of the labeled false-positives.</p> <p>You can delete these components by running <code>neuron.delete(ix);</code>. Alternatively, you can monitor each of these components with <code>neuron.viewNeurons(find(ix), neuron.C_raw);</code>.</p>"},{"location":"extraction/#merging-components","title":"Merging components","text":"<p>After deleting false positives, you can consider merging neurons by manually monitoring neurons that are close by. For this, run<code>neuron.merge_high_corr(1, [0.1, 0.3, -inf]);</code></p> <p>Note that you can create a new checkpoint at any point running <code>save_workspace(neuron);</code></p>"},{"location":"extraction/#picking-neurons-from-residual","title":"Picking Neurons from Residual","text":"<p>Some neurons may remain un-extracted after the initial processing. To extract potentially missed neurons run: <code>manually_update_residuals()</code></p>"},{"location":"extraction/#preparing-extracted-signals-for-analysis","title":"Preparing extracted signals for analysis","text":"<p>CaliAli performs a final detrending and noise scaling of the signals which facilitates posterior analysis. We recommend familiarizing with these two following functions which are executed automatically at the end of the pipeline:</p> <ul> <li>detrend_Ca_traces() </li> <li>scale_to_noise() </li> <li>postprocessDeconvolvedTraces() </li> </ul> CONGRATULATIONS! <p>You have successfully extracted neuronal signals using CaliAli. Don't forget to save the results with <code>save_workspace(neuron)</code></p>"},{"location":"function_index/","title":"Function Index","text":"Function Name apply_transformations() batchConvertVideos() CaliAli_align_sessions() CaliAli_cnmfe() CaliAli_concatenate_files() CaliAli_demo_parameters() CaliAli_downsample() CaliAli_get_blood_vessels() CaliAli_load() CaliAli_motion_correction() CaliAli_parameters() CaliAli_remove_background() CaliAli_save() CaliAli_save_chunk() CaliAli_set_initialization_parameters() CaliAli_update_parameters() CNMFE_parameters() detrend_Ca_traces() detrend_vid() dissimilarity_previous() get_alignment_metrics() get_BV_NR_score() get_local_corr_Vf() get_neuron_projections_correlations() get_projections_and_detrend() get_stored_projections() manually_classify_spatial_fun() manually_update_residuals() match_video_size() motion_metrics() Non_rigid_mc() plot_alignment_scores() postprocessDeconvolvedTraces() postprocessing_app() Rigid_mc() scale_to_noise() sessions_non_rigid() sessions_translate() update_background_CaliAli() update_residual_Cn_PNR_batch() update_spatial_CaliAli() update_temporal_CaliAli() vesselness_PV() view_Ca_video() view_traces()"},{"location":"initialization_diagram/","title":"hola","text":"<pre><code>graph TD;\n    D[Filtered Maximum projection];\n    D --&gt; E[Binarization];\n    E --&gt; F[Remove Small Objects using Area Filter];\n    F --&gt; G[Label Connected Components];\n    G --&gt; H[Select Largest Dendritic Structure];\n    H --&gt; I[Active Contour Refinement using Chan-Vese];\n    I --&gt; J[Main Branch Isolation];\n    J --&gt; K[Remove dendrite from binary image ];\n    K --&gt; L[Decrease Binarization threshold];\n    L --&gt;|Valid Dendrite Segments| M[Relabel and Assign IDs];\n    K--&gt;|Repeat until empty| H;\n    L--&gt;|Repeat| E;</code></pre> <p>hola</p>"},{"location":"Functions_doc/CNMFE_parameters/","title":"CNMFE parameters","text":"<pre><code>function pars=CNMFE_parameters(varargin)\n</code></pre>"},{"location":"Functions_doc/CNMFE_parameters/#description","title":"Description","text":"<p>CNMFE_parameters: Define and configure parameters for CNMF-E processing.</p> <p>This function initializes and returns a structured set of parameters for constrained non-negative matrix factorization (CNMF-E), including spatial, temporal, background, and merging constraints for neuronal extraction.</p>"},{"location":"Functions_doc/CNMFE_parameters/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description CaliAli_options Structure Contains configuration options."},{"location":"Functions_doc/CNMFE_parameters/#function-inputs_1","title":"Function Inputs:","text":"Parameter Name Type Description CaliAli_options Structure CaliAli_options structure parsed with CNMF parameters."},{"location":"Functions_doc/CNMFE_parameters/#example-usage","title":"Example usage:","text":"<pre><code>pars = CNMFE_parameters();   % Default parameter initialization\npars = CNMFE_parameters(existing_pars);   % Use existing parameter structure\n</code></pre>"},{"location":"Functions_doc/CaliAli_align_sessions/","title":"CaliAli align sessions","text":""},{"location":"Functions_doc/CaliAli_align_sessions/#syntax","title":"Syntax","text":"<pre><code>function CaliAli_align_sessions(varargin)\n</code></pre>"},{"location":"Functions_doc/CaliAli_align_sessions/#description","title":"Description","text":"<p>This function processes input files, performs inter-session alignment, calculates projections, and saves the transformed data.</p>"},{"location":"Functions_doc/CaliAli_align_sessions/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description CaliAli_options Structure Contains configuration options and transformation data."},{"location":"Functions_doc/CaliAli_align_sessions/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description CaliAli_options Structure Updated structure. video_aligned.mat <code>.mat</code> file <code>.mat</code> file with the aligned video and other alignment outputs"},{"location":"Functions_doc/CaliAli_align_sessions/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_options = CaliAli_demo_parameters();\nCaliAli_align_sessions(CaliAli_options);\n</code></pre>"},{"location":"Functions_doc/CaliAli_cnmfe/","title":"CaliAli cnmfe","text":""},{"location":"Functions_doc/CaliAli_cnmfe/#syntax","title":"Syntax","text":"<pre><code>function CaliAli_cnmfe()\n</code></pre>"},{"location":"Functions_doc/CaliAli_cnmfe/#description","title":"Description","text":"<p>CaliAli_cnmfe: Runs CNMF-E for source extraction in neuron or dendrite imaging data.</p>"},{"location":"Functions_doc/CaliAli_cnmfe/#function-inputs","title":"Function Inputs:","text":"<p>This function prompts the user to select .mat files containing the imaging data and CNMF-E parameters.  The selected files should follow the naming pattern <code>*_ds*.mat</code>.</p>"},{"location":"Functions_doc/CaliAli_cnmfe/#function-outputs","title":"Function Outputs:","text":"<p>This function does not return an output but processes each selected file  and saves the extracted neuron or dendrite components to the workspace.</p>"},{"location":"Functions_doc/CaliAli_cnmfe/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_cnmfe();\n</code></pre>"},{"location":"Functions_doc/CaliAli_concatenate_files/","title":"CaliAli concatenate files","text":""},{"location":"Functions_doc/CaliAli_concatenate_files/#syntax","title":"Syntax","text":"<pre><code>function out=CaliAli_concatenate_files(outpath,inputh,CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/CaliAli_concatenate_files/#description","title":"Description","text":"<p>Concatenate multiple video files into a single file.</p> <p>This function merges multiple .mat video files into a single output file. The resulting concatenated video is saved in the specified output path.</p>"},{"location":"Functions_doc/CaliAli_concatenate_files/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description outpath String (Optional) Path to save the output file. If not provided, a default name is generated. inputh Cell (Optional) Array of paths to input .mat files. If not provided, a file selection dialog is prompted. CaliAli_options Structure (Optional) Structure containing processing options."},{"location":"Functions_doc/CaliAli_concatenate_files/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description out String Path to the saved concatenated video file."},{"location":"Functions_doc/CaliAli_concatenate_files/#example-usage","title":"Example usage:","text":"<pre><code>out = CaliAli_concatenate_files();   % Interactive file selection\nout = CaliAli_concatenate_files(outpath, inputh, CaliAli_options);   % Using predefined parameters\n</code></pre>"},{"location":"Functions_doc/CaliAli_demo_parameters/","title":"CaliAli demo parameters","text":""},{"location":"Functions_doc/CaliAli_demo_parameters/#syntax","title":"Syntax","text":"<pre><code>function params=CaliAli_demo_parameters()\n</code></pre>"},{"location":"Functions_doc/CaliAli_demo_parameters/#description","title":"Description","text":"<p>CaliAli_demo_parameters: Define demo parameters for CaliAli processing pipeline.</p> <p>This function initializes and returns a structure containing default parameters for data preprocessing, motion correction, inter-session alignment, and neuronal extraction using CNMF-E.</p>"},{"location":"Functions_doc/CaliAli_demo_parameters/#function-inputs","title":"Function Inputs:","text":"<p>None</p>"},{"location":"Functions_doc/CaliAli_demo_parameters/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description params Structure All default parameters for CaliAli processing."},{"location":"Functions_doc/CaliAli_demo_parameters/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_Options = CaliAli_demo_parameters();\n</code></pre>"},{"location":"Functions_doc/CaliAli_demo_parameters/#parameters","title":"Parameters","text":""},{"location":"Functions_doc/CaliAli_demo_parameters/#data-preprocessing-parameters","title":"\ud83d\udccc Data Preprocessing Parameters","text":"Parameter Name Value Description <code>gSig</code> <code>2.5</code> Gaussian filter size for neurons (pixels) <code>sf</code> <code>10</code> Frame rate (fps) <code>BVsize</code> <code>[]</code> Size of blood vessels (pixels) [min diameter, max diameter]. Default is calculated based on <code>gSig</code>. <code>spatial_ds</code> <code>1</code> Spatial downsampling factor <code>temporal_ds</code> <code>1</code> Temporal downsampling factor <code>neuron_enhance</code> <code>true</code> Enhance neurons using MIN1PIE background subtraction <code>noise_scale</code> <code>true</code> Scale noise for each pixel <code>detrend</code> <code>1</code> Detrending window (seconds). <code>0</code> = no detrending <code>file_extension</code> <code>'avi'</code> If a folder is selected instead of a single video file, concatenate all videos with the specified file extension within that folder."},{"location":"Functions_doc/CaliAli_demo_parameters/#motion-correction-parameters","title":"\ud83d\udccc Motion Correction Parameters","text":"Parameter Name Value Description <code>do_non_rigid</code> <code>false</code> Perform non-rigid motion correction? <code>reference_projection_rigid</code> <code>'BV'</code> Use blood vessels as reference for rigid correction <code>non_rigid_pyramid</code> <code>{'BV', 'BV', 'neuron'}</code> Multi-level registration pyramid <code>non_rigid_batch_size</code> <code>[20, 60]</code> Frame range for parallel processing"},{"location":"Functions_doc/CaliAli_demo_parameters/#inter-session-alignment-parameters","title":"\ud83d\udccc Inter-session Alignment Parameters","text":"Parameter Name Value Description <code>projections</code> <code>'BV+neuron'</code> Use both blood vessels and neurons for alignment <code>final_neurons</code> <code>0</code> Perform an extra neuron alignment iteration? <code>Force_BV</code> <code>false</code> Force blood vessel use even if deemed unusable"},{"location":"Functions_doc/CaliAli_demo_parameters/#neuronal-extraction-cnmf-e-parameters","title":"\ud83d\udccc Neuronal Extraction (CNMF-E) Parameters","text":"Parameter Name Value Description <code>frames_per_batch</code> <code>0</code> Number of frames per batch. <code>0</code> = process each session as a single batch <code>memory_size_to_use</code> <code>256</code> Memory allowed for MATLAB (GB) <code>memory_size_per_patch</code> <code>16</code> Memory for each patch (GB) <code>patch_dims</code> <code>[64, 64]</code> Patch dimensions <code>with_dendrites</code> <code>true</code> Include dendrites in the model <code>search_method</code> <code>'dilate'</code> Search method (<code>'dilate'</code> or <code>'ellipse'</code>) <code>spatial_constraints</code> <code>struct('connected', false, 'circular', false)</code> Spatial constraints <code>spatial_algorithm</code> <code>'hals_thresh'</code> Spatial extraction algorithm"},{"location":"Functions_doc/CaliAli_demo_parameters/#deconvolution-parameters","title":"\ud83d\udccc Deconvolution Parameters","text":"Parameter Name Value Description <code>deconv_options.type</code> <code>'ar1'</code> Calcium trace model (<code>'ar1'</code> or <code>'ar2'</code>) <code>deconv_options.method</code> <code>'foopsi'</code> Deconvolution method <code>deconv_options.smin</code> <code>-5</code> Minimum spike size <code>deconv_options.optimize_pars</code> <code>true</code> Optimize AR parameters <code>deconv_options.optimize_b</code> <code>true</code> Optimize baseline <code>deconv_options.max_tau</code> <code>100</code> Max decay time (frames)"},{"location":"Functions_doc/CaliAli_demo_parameters/#background-modeling-parameters","title":"\ud83d\udccc Background Modeling Parameters","text":"Parameter Name Value Description <code>background_model</code> <code>'ring'</code> Background model <code>nb</code> <code>1</code> Number of background components <code>bg_neuron_factor</code> <code>1.5</code> Background-neuron interaction factor <code>ring_radius</code> <code>[]</code> Will be calculated later <code>num_neighbors</code> <code>[]</code> Number of neighbors for each neuron <code>bg_ssub</code> <code>2</code> Background downsampling factor"},{"location":"Functions_doc/CaliAli_demo_parameters/#merging-seeding-parameters","title":"\ud83d\udccc Merging &amp; Seeding Parameters","text":"Parameter Name Value Description <code>merge_thr</code> <code>0.65</code> Merging threshold <code>method_dist</code> <code>'max'</code> Distance calculation method <code>dmin</code> <code>5</code> Minimum distance between neurons <code>merge_thr_spatial</code> <code>[0.8, 0.4, -inf]</code> Spatial merging threshold <code>min_corr</code> <code>0.2</code> Minimum correlation for seeding <code>min_pnr</code> <code>4</code> Minimum peak-to-noise ratio for seeding"},{"location":"Functions_doc/CaliAli_downsample/","title":"CaliAli downsample","text":""},{"location":"Functions_doc/CaliAli_downsample/#syntax","title":"Syntax","text":"<pre><code>function CaliAli_options=CaliAli_downsample(varargin)\n</code></pre>"},{"location":"Functions_doc/CaliAli_downsample/#description","title":"Description","text":"<p>This function performs temporal and spatial downsampling on selected video files.  Supported formats include .avi, .m4v, .mp4, .tif, .tiff, .isxd, and .h5.</p>"},{"location":"Functions_doc/CaliAli_downsample/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description varargin array Variable input arguments, which are parsed into CaliAli_options ."},{"location":"Functions_doc/CaliAli_downsample/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description CaliAli_options structure Updated structure containing the downsampling parameters."},{"location":"Functions_doc/CaliAli_downsample/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_options = CaliAli_downsample();   % Interactive file selection\nCaliAli_options = CaliAli_downsample(CaliAli_options);   % Using predefined options\n</code></pre>"},{"location":"Functions_doc/CaliAli_get_blood_vessels/","title":"CaliAli get blood vessels","text":""},{"location":"Functions_doc/CaliAli_get_blood_vessels/#syntax","title":"Syntax","text":"<pre><code>function M=CaliAli_get_blood_vessels(M,CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/CaliAli_get_blood_vessels/#description","title":"Description","text":"<p>Enhance blood vessels in an image or video using a combination of vignetting removal, hessian filtering, and median filtering.</p>"},{"location":"Functions_doc/CaliAli_get_blood_vessels/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description M 2D/3D array Input image or video as a grayscale or color array. CaliAli_options Structure Optional structure containing processing parameters:- <code>opt.BVsize</code>: 2-element vector specifying the range of vessel scales (in pixels) for the vesselness filter (default: [1.5, 2.25])."},{"location":"Functions_doc/CaliAli_get_blood_vessels/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description M 2D/3D array Processed image or video with enhanced blood vessels."},{"location":"Functions_doc/CaliAli_get_blood_vessels/#example-usage","title":"Example usage:","text":"<pre><code>M = CaliAli_get_blood_vessels(M, CaliAli_options);\n</code></pre>"},{"location":"Functions_doc/CaliAli_load/","title":"CaliAli load","text":""},{"location":"Functions_doc/CaliAli_load/#syntax","title":"Syntax","text":"<pre><code>function data = CaliAli_load(filename, varname)\n</code></pre>"},{"location":"Functions_doc/CaliAli_load/#description","title":"Description","text":"<p>CaliAli_load: Load a specific variable or all variables from a .mat file.</p>"},{"location":"Functions_doc/CaliAli_load/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description filename String String specifying the .mat file to load. varname String (Optional) Name of the variable to load. Supports dot notation for nested structures (e.g., 'Struct.elem1'). If not provided, all variables are loaded."},{"location":"Functions_doc/CaliAli_load/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description data Array Loaded variable or a structure containing all variables."},{"location":"Functions_doc/CaliAli_load/#example-usage","title":"Example usage:","text":"<pre><code>data = CaliAli_load('data.mat');               % Load all variables\nvar  = CaliAli_load('data.mat', 'varname');    % Load a specific variable\nelem = CaliAli_load('data.mat', 'Struct.elem1');  % Load nested structure element\n</code></pre>"},{"location":"Functions_doc/CaliAli_motion_correction/","title":"CaliAli motion correction","text":"<pre><code>function CaliAli_options = CaliAli_motion_correction(varargin)\n</code></pre>"},{"location":"Functions_doc/CaliAli_motion_correction/#description","title":"Description","text":"<p>CaliAli_motion_correction: Perform rigid and non-rigid motion correction on video files.</p> <p>This function applies motion correction to a set of input video files. It performs both rigid and non-rigid motion correction, interpolates dropped frames, squares borders, and saves the corrected video as a .mat file.</p>"},{"location":"Functions_doc/CaliAli_motion_correction/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description varargin Variable-length input argument list Variable input arguments, which are parsed into  CaliAli_options."},{"location":"Functions_doc/CaliAli_motion_correction/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description CaliAli_options Updated structure containing the motion correction parameters. -"},{"location":"Functions_doc/CaliAli_motion_correction/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_options = CaliAli_motion_correction();   % Interactive file selection\nCaliAli_options = CaliAli_motion_correction(CaliAli_options);   % Using predefined options\n</code></pre>"},{"location":"Functions_doc/CaliAli_parameters/","title":"CaliAli parameters","text":"<pre><code>function opt=CaliAli_parameters(varargin)\n</code></pre>"},{"location":"Functions_doc/CaliAli_parameters/#description","title":"Description","text":"<p>CaliAli_parameters: Initialize and configure parameters for CaliAli processing.</p> <p>This function initializes and returns a structured set of parameters for different stages of the CaliAli processing pipeline, including downsampling, preprocessing, motion correction, inter-session alignment, and CNMF-E.</p>"},{"location":"Functions_doc/CaliAli_parameters/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description varargin array Variable input arguments, which can be an existing structure or key-value pairs specifying parameters."},{"location":"Functions_doc/CaliAli_parameters/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description opt struct Structure containing all processing parameters."},{"location":"Functions_doc/CaliAli_parameters/#example-usage","title":"Example usage:","text":"<pre><code>opt = CaliAli_parameters();   % Default parameter initialization\nopt = CaliAli_parameters(existing_opt);   % Use existing parameter structure\n</code></pre>"},{"location":"Functions_doc/CaliAli_parameters/#notes","title":"Notes:","text":"<ul> <li>Each processing module (downsampling, preprocessing, motion correction, inter-session alignment, and CNMF-E) has its own sub-structure with configurable parameters.</li> <li>The details of these structures can be found in CaliAli_demo_parameters().</li> </ul>"},{"location":"Functions_doc/CaliAli_remove_background/","title":"CaliAli remove background","text":"<pre><code>function Y = CaliAli_remove_background(Y, CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/CaliAli_remove_background/#description","title":"Description","text":"<p>CaliAli_remove_background: Preprocess video by removing background noise and enhancing features.</p> <p>This function applies background removal techniques to enhance neuronal or dendritic structures in an image or video. It supports detrending, noise scaling, and feature enhancement using the MIN1PIPE algorithm.</p>"},{"location":"Functions_doc/CaliAli_remove_background/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description Y 3D array Input image or video as a 3D array. CaliAli_options Structure Structure containing preprocessing parameters. See <code>CaliAli_demo_parameters()</code> for details."},{"location":"Functions_doc/CaliAli_remove_background/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description Y 3D array Background-corrected image or video."},{"location":"Functions_doc/CaliAli_remove_background/#example-usage","title":"Example usage:","text":"<pre><code>Y = CaliAli_remove_background(Y, CaliAli_options);\n</code></pre> <p>Notes:</p> <ul> <li>Detrending removes slow fluctuations in brightness.</li> <li>Noise scaling adjusts pixel noise levels for consistency.</li> <li>Neuronal and dendritic enhancement is performed based on the specified structure type ('neuron' or 'dendrite').</li> <li>A second noise scaling pass is applied after background removal.</li> </ul>"},{"location":"Functions_doc/CaliAli_save/","title":"CaliAli save","text":"<pre><code>function CaliAli_save(filename, varargin)\n</code></pre>"},{"location":"Functions_doc/CaliAli_save/#description","title":"Description","text":"<p>CaliAli_save: Save or append variables to a MAT-file.</p>"},{"location":"Functions_doc/CaliAli_save/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description filename String String specifying the file path to save or append data. varargin List List of variables to be saved."},{"location":"Functions_doc/CaliAli_save/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description None None Data is saved to the specified file."},{"location":"Functions_doc/CaliAli_save/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_save('output.mat', var1, var2);\n</code></pre>"},{"location":"Functions_doc/CaliAli_save_chunk/","title":"CaliAli save chunk","text":"<pre><code>function CaliAli_save_chunk(filename, Y,Id)\n</code></pre>"},{"location":"Functions_doc/CaliAli_save_chunk/#description","title":"Description","text":"<p>CaliAli_save_chunk: Save or append video data to a .mat file in chunks.</p>"},{"location":"Functions_doc/CaliAli_save_chunk/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description filename String String specifying the file path to save or append data. Y 3D Array 3D array containing the video data to be stored. Id 3D Array Id of the session being saved"},{"location":"Functions_doc/CaliAli_save_chunk/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description"},{"location":"Functions_doc/CaliAli_save_chunk/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_save_chunk('output.mat', Y, 2);\n</code></pre> <p>Notes:</p> <ul> <li>If the file exists, new data is appended along the third dimension.</li> <li>If the file does not exist, a new file is created with '-v7.3' format.</li> <li>No compression is used to optimize read/write speed.</li> </ul>"},{"location":"Functions_doc/CaliAli_set_initialization_parameters/","title":"CaliAli set initialization parameters","text":"<pre><code>function CaliAli_set_initialization_parameters(CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/CaliAli_set_initialization_parameters/#description","title":"Description","text":"<p>Graphic user interface for setting initialization parameters for CNMF-E processing. Function will call a file selector windows to choose the files to process.</p>"},{"location":"Functions_doc/CaliAli_set_initialization_parameters/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description CaliAli_options Structure Structure containing preprocessing settings."},{"location":"Functions_doc/CaliAli_set_initialization_parameters/#function-outputs","title":"Function Outputs:","text":"<p>None: Initialization parameters are stored inside the CaliAli_options structure of each file</p>"},{"location":"Functions_doc/CaliAli_set_initialization_parameters/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_set_initialization_parameters(CaliAli_options);\n</code></pre> <p>You can process several files at the same time.</p> This app can only be used with videos processed by CaliAli <p>Before using this application, files must be processed to calculate relevant projections (neurons, BV). This preprocessing step is performed when running CaliAli_align_sessions or  detrend_batch_and_calculate_projections. You cannot run this code on a video that has not undergone these steps, as the necessary projections will not be calculated.</p>"},{"location":"Functions_doc/CaliAli_set_initialization_parameters/#adjusting-pnr-and-correlation-thresholds","title":"Adjusting PNR and Correlation Thresholds","text":"<p>To visually set the PNR and Corr. threshold press the <code>Get</code> button highlighted in green for any of the loaded videos:</p> <p></p> Bug <p>Sometimes, the MATLAB AppDesigner app may not render panels correctly. This is a MATLAB bug. If this happens, just close and reopen the window to fix the issue.</p> <p>In the opened window, you will find three images displayed: the PNR image, the correlation image, and their point-wise product. Red dots overlaid on these images represent candidate neurons or \"seed pixels\". Below these images, there are two spinners that control the PNR and correlation thresholds. Adjusting these thresholds will change the number of seed pixels detected:</p> <p></p> <p>Additionally, you have the option to manually draw a mask to exclude specific regions within the field of view:</p> <p></p> Bug <p>Currently you can only draw the mask in the correlation image.</p> Important <p>Please note that the initialization of neurons depends solely on the third panel, which is the point-wise product of the correlation and PNR (peak-to-noise ratio). Even if some seeds appear above non-neuronal structures in either the correlation or PNR images, this will not compromise the extraction process as long as those seeds do not appear in the point-wise product image</p> <p>Once satisfied with the results press the <code>Ok!</code> button. This will automatically update the parameters for the chosen file with the new thresholds. </p> <p>After setting the PNR, Corr, gSig, and Frame rate parameters press <code>Done!</code></p>"},{"location":"Functions_doc/CaliAli_update_parameters/","title":"CaliAli update parameters","text":"<pre><code>function CaliAli_update_parameters(varargin)\n</code></pre>"},{"location":"Functions_doc/CaliAli_update_parameters/#description","title":"Description","text":"<p>CaliAli_update_parameters: Update parameters in multiple CaliAli session files.</p>"},{"location":"Functions_doc/CaliAli_update_parameters/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description varargin cell Key-value pairs specifying parameter names and new values, or a structure array containing multiple parameters."},{"location":"Functions_doc/CaliAli_update_parameters/#function-outputs","title":"Function Outputs:","text":"<p>None: Updates and saves modified parameters in selected .mat files. |</p>"},{"location":"Functions_doc/CaliAli_update_parameters/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_update_parameters('sf', 15, 'detrend', 2);\nCaliAli_update_parameters(CaliAli_options);\n</code></pre>"},{"location":"Functions_doc/Non_rigid_mc/","title":"Non rigid mc","text":"<pre><code>function V = Non_rigid_mc(V, ref, opt)\n</code></pre>"},{"location":"Functions_doc/Non_rigid_mc/#description","title":"Description","text":"<p>This function applies non-rigid motion correction to an input video using a multi-level registration approach. It constructs a pyramid of images (e.g., blood vessel and neuron projections) and applies log-domain demons registration to align frames while preserving fine details.</p> <p>Warning</p> <p>This code is experimental and may introduce undesired deformations when adjusting for non-rigid deformation.</p>"},{"location":"Functions_doc/Non_rigid_mc/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description V 3D array Input video as a height x width x frames array. ref Array Reference image for initial alignment. opt Structure Structure containing registration options."},{"location":"Functions_doc/Non_rigid_mc/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description V 3D array Motion-corrected video."},{"location":"Functions_doc/Non_rigid_mc/#example-usage","title":"Example usage:","text":"<pre><code>V_corrected = Non_rigid_mc(V, ref, opt);\n</code></pre>"},{"location":"Functions_doc/Rigid_mc/","title":"Rigid mc","text":""},{"location":"Functions_doc/Rigid_mc/#syntax","title":"Syntax","text":"<pre><code>function [Mr, Ref] = Rigid_mc(Y, opt)\n</code></pre>"},{"location":"Functions_doc/Rigid_mc/#description","title":"Description","text":"<p>This function applies rigid motion correction to a 3D image volume using the NoRMCorre algorithm. The correction is based on a reference projection that can be computed using blood vessel extraction or background removal.</p>"},{"location":"Functions_doc/Rigid_mc/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description Y 3D image volume The 3D image volume to be motion corrected. opt Structure A structure containing motion correction options."},{"location":"Functions_doc/Rigid_mc/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description Mr 3D image volume The motion-corrected 3D image volume. Ref Reference projection A reference projection used for motion correction."},{"location":"Functions_doc/Rigid_mc/#example-usage","title":"Example usage:","text":"<pre><code>[Mr, Ref] = Rigid_mc(Y, opt);\n</code></pre>"},{"location":"Functions_doc/apply_transformations/","title":"Apply transformations","text":""},{"location":"Functions_doc/apply_transformations/#syntax","title":"Syntax","text":"<pre><code>function CaliAli_options = apply_transformations(CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/apply_transformations/#description","title":"Description","text":"<p>Apply translation and non-rigid shifts to session data.</p>"},{"location":"Functions_doc/apply_transformations/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description CaliAli_options Structure Contains configuration options and transformation data."},{"location":"Functions_doc/apply_transformations/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description CaliAli_options Structure Updated structure."},{"location":"Functions_doc/batchConvertVideos/","title":"batchConvertVideos","text":""},{"location":"Functions_doc/batchConvertVideos/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>batchConvertVideos(fileList, outputFolder)\n</code></pre>"},{"location":"Functions_doc/batchConvertVideos/#description","title":"\ud83d\udccc Description","text":"<p>This function converts a list of AVI files into lossless grayscale MP4 files using FFmpeg. It assumes that the <code>ffmpeg</code> executable is located in the same directory as the function file.  </p> <p>If no input list is provided, the function prompts the user to select files. The converted videos will be saved in the specified output folder or the same directory as the input files.</p>"},{"location":"Functions_doc/batchConvertVideos/#function-inputs","title":"\ud83d\udccc Function Inputs","text":"Parameter Name Type Description <code>fileList</code> <code>cell array</code> A list of input video file paths. If not provided, a file picker will be displayed to select <code>.avi</code>, <code>.mp4</code>, <code>.m4v</code>, <code>.tif</code>, <code>.tiff</code>, or <code>.isxd</code> files. <code>outputFolder</code> <code>string</code> The directory where the converted MP4 files will be saved. If not specified, the converted files are saved in the same directory as the input videos."},{"location":"Functions_doc/batchConvertVideos/#function-outputs","title":"\ud83d\udccc Function Outputs","text":"<p>This function does not return any values but: - Converts each input video to a lossless grayscale MP4 file. - Saves the output files in the specified output folder. - Displays messages confirming the successful conversion.</p>"},{"location":"Functions_doc/batchConvertVideos/#dependencies","title":"\ud83d\udccc Dependencies","text":"<ul> <li>FFmpeg must be in the same directory as the function file. This is included with this code.</li> <li>The function uses <code>system</code> commands to execute FFmpeg.</li> </ul>"},{"location":"Functions_doc/batchConvertVideos/#example-usage","title":"\ud83d\udccc Example Usage","text":"<pre><code>% Convert selected files and save them in a custom output folder\nfileList = {'video1.avi', 'video2.avi'};\noutputFolder = 'C:\\ConvertedVideos';\nbatchConvertVideos(fileList, outputFolder);\n</code></pre> <pre><code>% Convert files by selecting them manually and saving in the same directory\nbatchConvertVideos();\n</code></pre>"},{"location":"Functions_doc/batchConvertVideos/#error-handling","title":"\ud83d\udccc Error Handling","text":"<ul> <li>If FFmpeg is missing, the function will fail when calling <code>system(command)</code>.</li> <li>If an invalid file is provided, FFmpeg may return an error message.</li> <li>If conversion fails, an error message will be displayed showing the reason.</li> </ul>"},{"location":"Functions_doc/batchConvertVideos/#process-workflow","title":"\ud83d\udccc Process Workflow","text":"<ol> <li>Check for input files: If no <code>fileList</code> is provided, the user selects files manually.</li> <li>Locate FFmpeg: The function assumes <code>ffmpeg</code> is in the same directory.</li> <li>Prepare output folder: If <code>outputFolder</code> is provided, it creates the directory if it doesn't exist.</li> <li>Convert each file:</li> <li>Extracts the filename.</li> <li>Constructs an FFmpeg command to convert to grayscale MP4 with <code>libx264</code> (CRF 0).</li> <li>Executes FFmpeg.</li> <li>Display conversion progress.</li> <li>Complete batch processing.</li> </ol>"},{"location":"Functions_doc/detrend_Ca_traces/","title":"detrend Ca traces","text":"<pre><code>function out=detrend_Ca_traces(nums,obj,F)\n</code></pre>"},{"location":"Functions_doc/detrend_Ca_traces/#description","title":"Description","text":"<p><code>detrend_Ca_traces</code>: Removes slow baseline fluctuations from calcium traces.</p>"},{"location":"Functions_doc/detrend_Ca_traces/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description <code>nums</code> double The window size factor used for median filtering and erosion. <code>obj</code> matrix The calcium activity traces (matrix of size [neurons x frames]). <code>F</code> double (Optional) The number of frames per batch. Defaults to <code>size(obj,2)</code>."},{"location":"Functions_doc/detrend_Ca_traces/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description <code>out</code> matrix The detrended calcium traces with baseline fluctuations removed."},{"location":"Functions_doc/detrend_Ca_traces/#example-usage","title":"Example usage:","text":"<pre><code>out = detrend_Ca_traces(10, neuron.C_raw);\nout = detrend_Ca_traces(nums,neuron.C_raw, 1000);\n</code></pre>"},{"location":"Functions_doc/detrend_Ca_traces/#functionality","title":"Functionality","text":"<ul> <li>Applies a median filter (<code>medfilt1</code>) to smooth the signal over <code>nums*10</code> frames.</li> <li>Refines the baseline using morphological erosion (<code>imerode</code>).</li> <li>Computes detrended traces by subtracting the estimated baseline from the original signal.</li> <li>Handles multi-batch datasets by processing each segment separately and concatenating results if needed.</li> </ul> <p>Warning</p> <ul> <li>Running this function modifies the temporal traces in a way that makes them unsuitable for further CNMF iterations. If additional CNMF iterations are needed, <code>neuron=CNMF_CaliAli_update('Temporal',neuron);</code> must be rerun to restore a compatible state.</li> </ul>"},{"location":"Functions_doc/detrend_batch_and_calculate_projections/","title":"Detrend batch and calculate projections","text":"<pre><code>#### Syntax\n```matlab\nfunction CaliAli_options = detrend_batch_and_calculate_projections(CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/detrend_batch_and_calculate_projections/#description","title":"Description","text":"<p>detrend_batch_and_calculate_projections: Perform detrending and projection calculations for batch processing.</p> <p>This function processes a batch of input files by applying detrending, calculating projections, and saving the transformed data. It updates the CaliAli_options structure with the computed results.</p>"},{"location":"Functions_doc/detrend_batch_and_calculate_projections/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description CaliAli_options Structure Structure containing configuration options for the alignment process. The details of this structure can be found in CaliAli_demo_parameters()."},{"location":"Functions_doc/detrend_batch_and_calculate_projections/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description CaliAli_options Structure Updated structure with calculated projections and other results."},{"location":"Functions_doc/detrend_batch_and_calculate_projections/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_options = detrend_batch_and_calculate_projections(CaliAli_options);\n</code></pre>"},{"location":"Functions_doc/detrend_vid/","title":"Detrend vid","text":"<pre><code>function Y=detrend_vid(Y,CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/detrend_vid/#description","title":"Description","text":"<p><code>detrend_vid</code>: Remove slow fluctuations in brightness from video data.</p> <p>This function performs detrending on a video by applying a moving median filter followed by a moving minimum filter. It helps to correct slow fluctuations in intensity over time.</p>"},{"location":"Functions_doc/detrend_vid/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description Y 3D array Input video as a height x width x frames array. CaliAli_options Structure Structure containing preprocessing parameters. The details of this structure can be found in <code>CaliAli_demo_parameters()</code>."},{"location":"Functions_doc/detrend_vid/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description Y 3D array Detrended video with slow fluctuations removed."},{"location":"Functions_doc/detrend_vid/#example-usage","title":"Example usage:","text":"<pre><code>Y_detrended = detrend_vid(Y, CaliAli_options);\n</code></pre> <p>Note</p> <ul> <li>The moving median filter operates over a window size determined by the product of the sampling frequency and the detrending factor.</li> <li>A secondary moving minimum filter is applied to further refine background fluctuations.</li> <li>Negative values are clipped to zero after detrending forcing non-negative data.</li> </ul>"},{"location":"Functions_doc/dissimilarity_previous/","title":"Dissimilarity previous","text":"<pre><code>function dis=dissimilarity_previous(A1,A2,C1,C2)\n</code></pre>"},{"location":"Functions_doc/dissimilarity_previous/#description","title":"Description","text":"<p>Computes the dissimilarity between spatial and temporal components.</p>"},{"location":"Functions_doc/dissimilarity_previous/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description A1 matrix Spatial footprints of extracted components (matrices). A2 matrix Spatial footprints of extracted components (matrices). C1 matrix Temporal activity traces of extracted components (matrices). C2 matrix Temporal activity traces of extracted components (matrices)."},{"location":"Functions_doc/dissimilarity_previous/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description dis scalar A scalar value representing the dissimilarity between previous and updated components."},{"location":"Functions_doc/dissimilarity_previous/#example-usage","title":"Example usage:","text":"<pre><code>dis = dissimilarity_previous(A1, A2, C1, C2);\n</code></pre>"},{"location":"Functions_doc/get_BV_NR_score/","title":"get BV NR score","text":""},{"location":"Functions_doc/get_BV_NR_score/#syntax","title":"Syntax:","text":"<pre><code>function out=get_BV_NR_score(P,k) \n</code></pre>"},{"location":"Functions_doc/get_BV_NR_score/#description","title":"Description:","text":"<p>Compute blood vessel non-rigid alignment stability score.</p>"},{"location":"Functions_doc/get_BV_NR_score/#inputs","title":"Inputs:","text":"Parameter Name Type Description P Table Table containing projection data from session alignment. k Optional Index of the projection to evaluate. Default is 3 (Neurons)."},{"location":"Functions_doc/get_BV_NR_score/#outputs","title":"Outputs:","text":"Parameter Name Type Description out Stability score Stability score indicating the reliability of blood vessel alignment. <p>Example usage: <pre><code>score = get_BV_NR_score(P);\nscore = get_BV_NR_score(P, 2);\n</code></pre></p> <p>Note</p> <ul> <li>Compares alignment variability across multiple randomized non-rigid motion perturbations.</li> <li>Uses correlation distance to quantify alignment consistency.</li> <li>Ensures reproducibility by setting a fixed random seed.</li> </ul>"},{"location":"Functions_doc/get_alignment_metrics/","title":"Get alignment metrics","text":"<pre><code>function T=get_alignment_metrics(P)\n</code></pre>"},{"location":"Functions_doc/get_alignment_metrics/#description","title":"Description","text":"<p><code>get_alignment_metrics</code>: Compute alignment quality metrics for different transformations.</p>"},{"location":"Functions_doc/get_alignment_metrics/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description P Table Table containing different alignment transformations and their projections."},{"location":"Functions_doc/get_alignment_metrics/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description T Table Table containing alignment metrics such as correlation scores and crispness."},{"location":"Functions_doc/get_alignment_metrics/#example-usage","title":"Example usage:","text":"<pre><code>T = get_alignment_metrics(P);\n</code></pre>"},{"location":"Functions_doc/get_alignment_metrics/#notes","title":"Notes:","text":"<ul> <li>Evaluates alignment quality using correlation and sharpness metrics.</li> <li>Computes alignment metrics for neuron projections.</li> <li>Supports additional metrics for blood vessel projections (commented in the cod</li> </ul>"},{"location":"Functions_doc/get_local_corr_Vf/","title":"get local corr Vf","text":"<pre><code>function mc=get_local_corr_Vf(Vf,M) \n</code></pre>"},{"location":"Functions_doc/get_local_corr_Vf/#description","title":"Description","text":"<p>get_local_corr_Vf: Compute local correlation-based similarity for vesselness-filtered data.</p>"},{"location":"Functions_doc/get_local_corr_Vf/#inputs","title":"Inputs:","text":"Parameter Name Type Description Vf 3D array Contains vesselness-filtered images (blood vessels). M 3D array Represents the mean reference image."},{"location":"Functions_doc/get_local_corr_Vf/#outputs","title":"Outputs:","text":"Parameter Name Type Description mc 2D array Represents the computed local correlation-based similarity map."},{"location":"Functions_doc/get_local_corr_Vf/#example-usage","title":"Example usage:","text":"<pre><code>mc = get_local_corr_Vf(Vf, M);\n</code></pre>"},{"location":"Functions_doc/get_neuron_projections_correlations/","title":"Get neuron projections correlations","text":""},{"location":"Functions_doc/get_neuron_projections_correlations/#syntax","title":"Syntax","text":"<pre><code>function [out,W]=get_neuron_projections_correlations(P,k) \n</code></pre>"},{"location":"Functions_doc/get_neuron_projections_correlations/#description","title":"Description","text":"<p>Compute correlation metrics for neuron projections.</p>"},{"location":"Functions_doc/get_neuron_projections_correlations/#inputs","title":"Inputs:","text":"Parameter Name Type Description P Table Table containing neuron projection data. k Optional Index of the projection to evaluate. k = 1 Mean projections, k = 2 Blood vessels, k = 3 Neuron, k = 4 PNR image"},{"location":"Functions_doc/get_neuron_projections_correlations/#outputs","title":"Outputs:","text":"Parameter Name Type Description out Double Minimum correlation deviation across projections. W Double Weighting factor based on projection correlation."},{"location":"Functions_doc/get_neuron_projections_correlations/#example-usage","title":"Example usage:","text":"<pre><code>[out, W] = get_neuron_projections_correlations(P);\n[out, W] = get_neuron_projections_correlations(P, 2);\n</code></pre> <p>Notes: - Uses normalized cross-correlation to compare neuron projections across sessions. - Computes mean and standard deviation of correlation within a limited region. - Flags sessions with low correlation for further inspection.</p>"},{"location":"Functions_doc/get_projections_and_detrend/","title":"Get projections and detrend","text":"<pre><code>function [Y, p, R, CaliAli_options] = get_projections_and_detrend(Y, CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/get_projections_and_detrend/#description","title":"Description","text":"<p>Process session data by detrending and computing projections.</p> <p>This function processes video session data by applying detrending, removing background noise, and calculating projections such as blood vessels, neuron activity, peak-to-noise ratio (PNR), and correlation images.</p>"},{"location":"Functions_doc/get_projections_and_detrend/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description Y 3D array Input video session data as a height x width x frames array. CaliAli_options Structure Configuration options for processing, details in CaliAli_demo_parameters()."},{"location":"Functions_doc/get_projections_and_detrend/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description Y 3D array Detrended and background-corrected video data. p Table Table containing projections: mean image, blood vessels, neuron projection, PNR, and a fused BV-neuron image. R Data range Data range after detrending, used for normalization. CaliAli_options Structure Updated options structure after processing."},{"location":"Functions_doc/get_projections_and_detrend/#example-usage","title":"Example usage:","text":"<pre><code>[Y, p, R, CaliAli_options] = get_projections_and_detrend(Y, CaliAli_options);\n</code></pre>"},{"location":"Functions_doc/get_stored_projections/","title":"Get stored projections","text":""},{"location":"Functions_doc/get_stored_projections/#syntax","title":"Syntax","text":"<pre><code>function T = get_stored_projections(CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/get_stored_projections/#description","title":"Description","text":"<p>Retrieve and combine stored projections from session files.</p>"},{"location":"Functions_doc/get_stored_projections/#inputs","title":"Inputs:","text":"Parameter Name Type Description CaliAli_options Structure Contains configuration options, including session file paths."},{"location":"Functions_doc/get_stored_projections/#outputs","title":"Outputs:","text":"Parameter Name Type Description T Table Contains the combined projections from all session files."},{"location":"Functions_doc/get_stored_projections/#example-usage","title":"Example usage:","text":"<p>T = get_stored_projections(CaliAli_options);</p>"},{"location":"Functions_doc/manually_classify_spatial_fun/","title":"Manually classify spatial fun","text":"<pre><code>function ix=manually_classify_spatial_fun(neuron,ix)\n</code></pre>"},{"location":"Functions_doc/manually_classify_spatial_fun/#description","title":"Description","text":"<p>This MATLAB function allows for manual classification of spatial data related to neurons. It takes two inputs: <code>neuron</code> and <code>ix</code>, and returns the updated index set <code>ix</code> after user interaction for classification.</p>"},{"location":"Functions_doc/manually_classify_spatial_fun/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description neuron struct A structure containing neuron data. ix array An array of indices to be classified."},{"location":"Functions_doc/manually_classify_spatial_fun/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description ix array Updated index set after classification."},{"location":"Functions_doc/manually_classify_spatial_fun/#example-usage","title":"Example usage:","text":"<pre><code>classified_indices = manually_classify_spatial_fun(neuron);\n</code></pre>"},{"location":"Functions_doc/manually_update_residuals/","title":"Manually update residuals","text":"<pre><code>function neuron=manually_update_residuals(neuron,use_parallel)\n</code></pre>"},{"location":"Functions_doc/manually_update_residuals/#description","title":"Description","text":"<p>manually_update_residuals: Iteratively refines residuals in CNMF-E extracted components.</p>"},{"location":"Functions_doc/manually_update_residuals/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description neuron structure CNMF-E extracted neuron structure containing spatial (A) and temporal (C_raw) components. use_parallel boolean Boolean flag to enable parallel computation for speed-up."},{"location":"Functions_doc/manually_update_residuals/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description neuron structure Updated neuron structure with refined residuals."},{"location":"Functions_doc/manually_update_residuals/#example-usage","title":"Example usage:","text":"<p><pre><code>neuron = manually_update_residuals(neuron, true);\n</code></pre> This will open a GUI displaying the PNR, Corr., and PNR*Corr. images(1). These images will be shown in their original form (top panels) and also after subtracting the current neuron detections from the video (Residual video) (bottom panels).</p> <ol> <li>Refer to Select Extraction Parameters for a description of the PNR, Corr. and PNR*Corr images.</li> </ol> <p>Here, you can manually add initialization seeds for undetected neurons. Clicking on any of these images will place a red dot that initializes these neurons:</p> <p></p> <p>This will initialize these neurons and repeat the CNMF process required to extract the Calcium signals.</p> Tip <p>In most cases picking neurons is not necessary.</p>"},{"location":"Functions_doc/match_video_size/","title":"Match video size","text":"<pre><code>function CaliAli_options = match_video_size(CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/match_video_size/#description","title":"Description","text":"<p>Ensure consistent video dimensions across sessions.</p> <p>This function aligns video dimensions across multiple sessions by cropping borders to match a common mask. It ensures that sessions dimensions match before performing inter-session alignment.</p>"},{"location":"Functions_doc/match_video_size/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description CaliAli_options Structure Structure containing configuration options for alignment. <p>The details of this structure can be found in CaliAli_demo_parameters().</p>"},{"location":"Functions_doc/match_video_size/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description CaliAli_options Structure Updated structure with matched video dimensions."},{"location":"Functions_doc/match_video_size/#example-usage","title":"Example usage:","text":"<pre><code>CaliAli_options = match_video_size(CaliAli_options);\n</code></pre>"},{"location":"Functions_doc/motion_metrics/","title":"Motion metrics","text":"<pre><code>function [cY,mY,ng] = motion_metrics(Y,bnd,batch_size,var_name)\n</code></pre>"},{"location":"Functions_doc/motion_metrics/#description","title":"Description","text":"<p><code>motion_metrics</code>: Compute correlation and gradient metrics for motion assessment.</p>"},{"location":"Functions_doc/motion_metrics/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description Y 3D/4D array or memory-mapped array Registered time series data, either a 3D or 4D array, or a memory-mapped array. bnd Array (Optional) Number of pixels to exclude at borders to avoid NaN effects. Format: [x_beg, x_end, y_beg, y_end, z_beg, z_end]. Default is [0, 0, 0, 0, 0, 0]. batch_size Scalar (Optional) Batch size for processing memory-mapped files. Default: 1000. var_name String (Optional) Variable name for memory-mapped files."},{"location":"Functions_doc/motion_metrics/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description cY Array Correlation coefficient of each frame with the mean image. mY Array Mean image computed from all frames. ng Scalar Norm of the gradient of the mean image."},{"location":"Functions_doc/motion_metrics/#example-usage","title":"Example usage:","text":"<pre><code>[cY, mY, ng] = motion_metrics(Y);\n[cY, mY, ng] = motion_metrics(Y, [10,10,10,10,0,0], 500);\n</code></pre>"},{"location":"Functions_doc/plot_alignment_scores/","title":"Plot alignment scores","text":""},{"location":"Functions_doc/plot_alignment_scores/#syntax","title":"Syntax","text":"<pre><code>function plot_alignment_scores(CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/plot_alignment_scores/#description","title":"Description","text":"<p>Visualize alignment scores across sessions.</p>"},{"location":"Functions_doc/plot_alignment_scores/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description CaliAli_options Structure Contains inter-session alignment data."},{"location":"Functions_doc/plot_alignment_scores/#function-outputs","title":"Function Outputs:","text":"<p>None: generates a plot of alignment scores and prints misalignment statistics.</p>"},{"location":"Functions_doc/plot_alignment_scores/#example-usage","title":"Example usage:","text":"<pre><code>plot_alignment_scores(CaliAli_options);\n</code></pre>"},{"location":"Functions_doc/postprocessDeconvolvedTraces/","title":"postprocessDeconvolvedTraces","text":"<pre><code>function neuron = postprocessDeconvolvedTraces(neuron, method, type, smin)\n</code></pre>"},{"location":"Functions_doc/postprocessDeconvolvedTraces/#description","title":"Description","text":"<p>This function applies deconvolution to calcium traces and performs post-processing to denoise the traces based on specified options. It allows users to change the autoregressive model (<code>ar1</code>, <code>ar2</code>, etc.) at the end of CNMF iterations for refined neuronal activity estimation.</p>"},{"location":"Functions_doc/postprocessDeconvolvedTraces/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description neuron struct A struct containing the raw calcium traces (neuron.C_raw). method string The deconvolution method to use (default is 'foopsi'). type string The type of deconvolution (default is 'ar2'). smin double Minimum threshold for deconvolution (default is -5)."},{"location":"Functions_doc/postprocessDeconvolvedTraces/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description neuron struct Updated struct with processed calcium traces (neuron.C and neuron.S)."},{"location":"Functions_doc/postprocessDeconvolvedTraces/#example-usage","title":"Example usage:","text":"<pre><code>neuron = postprocessDeconvolvedTraces(neuron);\nneuron = postprocessDeconvolvedTraces(neuron, 'thresholded', 'ar1', -3);\n</code></pre> <ul> <li>It allows users to change the autoregressive model (<code>ar1</code>, <code>ar2</code>, etc.) at the end of CNMF iterations for refined neuronal activity estimation.</li> <li>This is particularly useful if a fast deconvolution method (e.g., <code>foopsi</code>) was used during CNMF iterations, and a more precise but slower thresholded method is desired  for final processing.</li> </ul> <p>Warning</p> <ul> <li>Running this function modifies the temporal traces in a way that makes them unsuitable for further CNMF iterations. If additional CNMF iterations are needed, <code>neuron=CNMF_CaliAli_update('Temporal',neuron);</code> must be rerun to restore a compatible state.</li> </ul>"},{"location":"Functions_doc/postprocessing_app/","title":"Postprocessing app","text":""},{"location":"Functions_doc/postprocessing_app/#syntac","title":"Syntac","text":"<pre><code>function ix=postprocessing_app(neuron,thr)\n</code></pre>"},{"location":"Functions_doc/postprocessing_app/#description","title":"Description","text":"<p>Interactive labeling and classification of CNMF-E components.</p>"},{"location":"Functions_doc/postprocessing_app/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description neuron struct CNMF-E neuron structure containing extracted components. thr double Threshold for drawing neuron contours."},{"location":"Functions_doc/postprocessing_app/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description ix logical Logical index of selected components, where selected components are those labeled in all three projection views."},{"location":"Functions_doc/postprocessing_app/#example-usage","title":"Example usage:","text":"<pre><code>ix = postprocessing_app(neuron, 0.8);\n</code></pre> <p>The post-processing app will display the correlation image with overlaid contours of the detected neurons. Clicking on these contours will show the corresponding extracted calcium transients:</p> <p></p> <p>You can hold you mouse to zoom:</p> <p></p> <p>You can reset the zoom and clear the neuronal selection by pressing the buttons located above the correlation image:</p> <p></p> <p>You can label false positives by right-clicking on the neuron contours:</p> <p></p>"},{"location":"Functions_doc/postprocessing_app/#sort-spatial-components","title":"Sort Spatial Components","text":"<p>CaliAli can label false positives based on the shape of the extracted spatial components. To accomplish this, CaliAli incorporates a tool that sorts spatial components by their spatial congruence. To utilize this function, press the 'Separate Spatial' button.</p> <p>This will open a panel displaying all the extracted spatial components. Components with congruent shapes are sorted at the beginning, while neurons with shapes different from the rest of the population are sorted last. Components labeled as false-positives will be listed on the right.</p> <p></p> <p>Note that elongated components, which could correspond to neuropil signals rather than neuron somas, appear at the bottom of the list. You can select these components and move them to the false-positive panel.</p> <p></p> <p>Once satisfied with the selections press the <code>Done!</code> button.</p> <p>This will label the component as false-positive in the correlation image. </p>"},{"location":"Functions_doc/scale_to_noise/","title":"Scale to noise","text":"<pre><code>function scale_to_noise(neuron)\n</code></pre>"},{"location":"Functions_doc/scale_to_noise/#description","title":"Description","text":"<p><code>scale_to_noise</code>: Normalizes raw calcium traces based on estimated noise levels.</p>"},{"location":"Functions_doc/scale_to_noise/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description neuron <code>Sources2D</code> object A <code>Sources2D</code> object containing extracted calcium signals and options."},{"location":"Functions_doc/scale_to_noise/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description (none) - The function modifies <code>neuron.C_raw</code> in place, normalizing calcium traces using noise estimates."},{"location":"Functions_doc/scale_to_noise/#example-usage","title":"Example usage:","text":"<pre><code>scale_to_noise(neuron);\n</code></pre> <ul> <li>This function estimates the noise level by computing the residual between the raw calcium trace (<code>C_raw</code>) and the deconvolved signal.</li> <li>A moving window approach is used to handle large datasets.</li> </ul> <p>Warning</p> <ul> <li>Running this function modifies the temporal traces in a way that makes them unsuitable for further CNMF iterations. If additional CNMF iterations are needed, <code>neuron=CNMF_CaliAli_update('Temporal',neuron);</code> must be rerun to restore a compatible state.</li> </ul>"},{"location":"Functions_doc/sessions_non_rigid/","title":"Sessions non rigid","text":"<pre><code>function [P, CaliAli_options] = sessions_non_rigid(P, CaliAli_options, neurons_only)\n</code></pre>"},{"location":"Functions_doc/sessions_non_rigid/#description","title":"Description","text":"<p><code>sessions_non_rigid</code>: Perform non-rigid alignment for session data.</p>"},{"location":"Functions_doc/sessions_non_rigid/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description P Cell array Cell array containing the session projections. CaliAli_options Structure Structure containing configuration options for alignment. neurons_only Boolean (Optional) Boolean flag indicating whether to align only neuron data. Default is false."},{"location":"Functions_doc/sessions_non_rigid/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description P Cell array Updated cell array with applied non-rigid shifts. CaliAli_options Structure Updated structure with computed non-rigid transformations."},{"location":"Functions_doc/sessions_non_rigid/#example-usage","title":"Example usage:","text":"<pre><code>[P, CaliAli_options] = sessions_non_rigid(P, CaliAli_options);\n[P, CaliAli_options] = sessions_non_rigid(P, CaliAli_options, true);  % Align utilizing only neurons projections\n</code></pre>"},{"location":"Functions_doc/sessions_translate/","title":"Sessions translate","text":"<pre><code>function [P, CaliAli_options] = sessions_translate(P, CaliAli_options)\n</code></pre>"},{"location":"Functions_doc/sessions_translate/#description","title":"Description","text":"<p><code>sessions_translate</code>: Align session data by applying translation corrections.</p>"},{"location":"Functions_doc/sessions_translate/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description P Cell array Cell array containing the session projections. CaliAli_options Structure Structure containing configuration options for alignment."},{"location":"Functions_doc/sessions_translate/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description P Cell array Updated cell array with translated projections. CaliAli_options Structure Updated structure with applied translation shifts."},{"location":"Functions_doc/sessions_translate/#example-usage","title":"Example usage:","text":"<pre><code>[P, CaliAli_options] = sessions_translate(P, CaliAli_options);\n</code></pre>"},{"location":"Functions_doc/update_background_CaliAli/","title":"update background CaliAli","text":"<pre><code>function obj=update_background_CaliAli(obj, use_parallel,F)\n</code></pre>"},{"location":"Functions_doc/update_background_CaliAli/#description","title":"Description","text":"<p><code>update_background_CaliAli</code> - Updates background estimation in multiple batches.</p> <p>This function refines the background estimation in a CNMF pipeline by processing the data in multiple batches. It ensures efficient memory usage and robust background modeling by iteratively aggregating and normalizing results from each batch. The final background components are used to improve neuronal activity extraction.</p>"},{"location":"Functions_doc/update_background_CaliAli/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description obj CNMF object The CNMF object containing spatial and temporal components. use_parallel Boolean Boolean flag indicating whether to use parallel processing. F Array Optional array specifying batch sizes for processing. If not provided, it is determined using <code>get_batch_size(obj)</code>."},{"location":"Functions_doc/update_background_CaliAli/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description obj CNMF object Updated CNMF object with refined background components."},{"location":"Functions_doc/update_background_CaliAli/#example-usage","title":"Example usage:","text":"<pre><code>obj = update_background_CaliAli(obj, true);\n</code></pre>"},{"location":"Functions_doc/update_residual_Cn_PNR_batch/","title":"update residual Cn PNR batch","text":"<pre><code>function neuron=update_residual_Cn_PNR_batch(neuron)\n</code></pre>"},{"location":"Functions_doc/update_residual_Cn_PNR_batch/#description","title":"Description","text":"<p>Calculate Cn and PNR neuron projections from the residual video.</p>"},{"location":"Functions_doc/update_residual_Cn_PNR_batch/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description neuron struct A structure containing neuron data and parameters."},{"location":"Functions_doc/update_residual_Cn_PNR_batch/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description neuron struct The updated neuron structure with CNr and PNRr (residual projections)"},{"location":"Functions_doc/update_residual_Cn_PNR_batch/#example-usage","title":"Example usage:","text":"<pre><code>neuron = update_residual_Cn_PNR_batch(neuron);\n</code></pre>"},{"location":"Functions_doc/update_spatial_CaliAli/","title":"update spatial CaliAli","text":"<pre><code>function obj=update_spatial_CaliAli(obj, use_parallel,F)\n</code></pre>"},{"location":"Functions_doc/update_spatial_CaliAli/#description","title":"Description","text":"<p><code>update_spatial_CaliAli</code> - Updates the spatial components of extracted neuronal signals.</p> <p>This function refines the spatial footprints of detected neurons by processing data in multiple batches. It updates the spatial maps (A) based on activity levels while accounting for spatial variability, ensuring robust separation of overlapping components.</p>"},{"location":"Functions_doc/update_spatial_CaliAli/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description obj CNMF object Object containing spatial and temporal components. use_parallel Boolean Flag for enabling parallel processing. F Array Specifies batch sizes for processing. If not provided, it is determined using <code>get_batch_size(obj)</code>."},{"location":"Functions_doc/update_spatial_CaliAli/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description obj CNMF object Updated object with refined spatial components."},{"location":"Functions_doc/update_spatial_CaliAli/#example-usage","title":"Example usage:","text":"<pre><code>neuron = update_spatial_CaliAli(neuron, true);\nneuron = update_spatial_CaliAli(neuron, false, batch_frames);\n</code></pre>"},{"location":"Functions_doc/update_temporal_CaliAli/","title":"update temporal CaliAli","text":"<pre><code>function obj=update_temporal_CaliAli(obj, use_parallel,F)\n</code></pre>"},{"location":"Functions_doc/update_temporal_CaliAli/#description","title":"Description","text":"<p><code>update_temporal_CaliAli</code> - Updates the temporal components of extracted neuronal signals.</p> <p>This function refines the temporal dynamics of detected neuronal components by processing the data in multiple batches. It updates the neuronal activity traces while accounting for residual background activity, ensuring robust deconvolution and denoising.</p>"},{"location":"Functions_doc/update_temporal_CaliAli/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description obj CNMF object Object containing spatial and temporal components. use_parallel Boolean Flag for enabling parallel processing. F Array Specifies batch sizes for processing. If not provided, it is determined using <code>get_batch_size(obj)</code>."},{"location":"Functions_doc/update_temporal_CaliAli/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description obj CNMF object Updated CNMF object with refined temporal components."},{"location":"Functions_doc/update_temporal_CaliAli/#example-usage","title":"Example usage:","text":"<p>```matlab neuron = update_temporal_CaliAli(neuron, true); neuron = update_temporal_CaliAli(neuron, false, batch_frames);</p>"},{"location":"Functions_doc/vesselness_PV/","title":"vesselness PV","text":"<pre><code>function vid=vesselness_PV(vid,use_parallel,sz,norm)\n</code></pre>"},{"location":"Functions_doc/vesselness_PV/#description","title":"Description","text":"<p>This function enhances blood vessels in an input image or video using frangi filtering. It supports both sequential and parallel processing.</p>"},{"location":"Functions_doc/vesselness_PV/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description vid 2D/3D array Input image or video as a 2D or 3D array. use_parallel Boolean (Optional) Boolean flag to enable parallel processing (default: 1). sz Vector (Optional) Scale range for the vesselness filter (default: 0.5:0.5:2). norm Boolean (Optional) Normalization flag for vesselness filtering (default: 0)."},{"location":"Functions_doc/vesselness_PV/#function-outputs","title":"Function Outputs:","text":"Parameter Name Type Description vid 2D/3D array Image or video with enhanced blood vessels."},{"location":"Functions_doc/vesselness_PV/#example-usage","title":"Example usage:","text":"<pre><code>vid_filtered = vesselness_PV(vid);   % Default parameters with parallel processing\nvid_filtered = vesselness_PV(vid, 0, 0.5:0.5:2, 1);   % Sequential processing with normalization\n</code></pre>"},{"location":"Functions_doc/vesselness_PV/#notes","title":"Notes:","text":"<ul> <li>Uses vesselness filtering to enhance tubular structures in images.</li> <li>Parallel processing is available for large videos to improve efficiency.</li> <li>Normalization ensures that vessel structures are highlighted consistently.</li> </ul>"},{"location":"Functions_doc/view_Ca_video/","title":"view Ca video","text":"<pre><code>function view_Ca_video()\n</code></pre>"},{"location":"Functions_doc/view_Ca_video/#description","title":"Description","text":"<p>Interactive visualization of calcium imaging video with playback controls.</p>"},{"location":"Functions_doc/view_Ca_video/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description Neuron CNMF-E neuron object Output of CNMF-E and CaliAli_cnmf()"},{"location":"Functions_doc/view_Ca_video/#function-outputs","title":"Function Outputs:","text":"<p>None (displays the selected video interactively).</p>"},{"location":"Functions_doc/view_Ca_video/#example-usage","title":"Example usage:","text":"<pre><code>view_Ca_video();\n</code></pre> <p>To reproduce video data stored in the <code>.mat</code> files, use the <code>view_Ca_video()</code> function and select the desired <code>.mat</code> file for monitoring(1).</p> <ol> <li>Code modified from Joao Henriques (2024). Figure to play and analyze videos with custom plots on top , MATLAB Central File Exchange. </li> </ol> <p></p> <p>This app includes the following functionalities:</p> <ul> <li>Enter   Play/Stop the video.</li> <li>Backspace    Play/Stop the video at 3x speed.</li> <li>Left/Right   Advance/go back one frame. Alternatively, you can use the scroll bar at the bottom of the screen.</li> <li>Page Down/Page Up   Advance/go back 30 frames.</li> <li>C   Adjust contrast settings in the video.</li> </ul> Bug <p>When adjusting the contrast of the video, avoid using the <code>Adjust contrast</code> button. Instead, simply close the window by clicking the <code>[x]</code> button at the upper right corner of the screen.</p>"},{"location":"Functions_doc/view_traces/","title":"View traces","text":""},{"location":"Functions_doc/view_traces/#syntax","title":"Syntax","text":"<pre><code>function view_traces()\n</code></pre>"},{"location":"Functions_doc/view_traces/#description","title":"Description","text":"<p>Interactive visualization of calcium traces obtained with CNMF-E.</p>"},{"location":"Functions_doc/view_traces/#function-inputs","title":"Function Inputs:","text":"Parameter Name Type Description Neuron CNMF-E neuron object Output of CNMF-E and CaliAli_cnmf()"},{"location":"Functions_doc/view_traces/#function-outputs","title":"Function Outputs:","text":"<p>None (displays the selected traces interactively).</p>"},{"location":"Functions_doc/view_traces/#example-usage","title":"Example usage:","text":"<pre><code>view_traces(neuron);\n</code></pre>"},{"location":"Functions_doc/view_traces/#monitoring-extracted-calcium-transients","title":"Monitoring Extracted Calcium Transients","text":"<p>CaliAli includes an app to plot the extracted calcium signals. After loading the <code>neuron</code> object, run <code>view_traces(neuron)</code>.</p> <p></p> <p>This app includes the following functionalities:</p> <ul> <li>Left / Right    Scroll back or forward. Alternatively, you can use the scroll bar at the bottom of the screen.</li> <li>Use the vertical scroll bar to navigate through traces.</li> <li>Shift+Up / Shift+Down   Increase/decrease the number of traces being displayed. </li> <li>Shift+Right / Shift+Left    Increase/decrease the temporal resolution.</li> <li>Use the mouse scroll wheel to change the vertical zoom.</li> <li>Press the <code>C</code> button to plot the denoised traces.</li> <li>Press the <code>S</code> button to plot the predicted rising events.</li> </ul>"}]}